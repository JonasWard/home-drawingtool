{"version":3,"sources":["reducers/project-reducer.js","reducers/index.js","store.js","theme.js","components/common/icons/ExpandSvgIcon.js","components/common/Expandable.js","components/common/buttons/ColoredIconButton.js","components/navigation/BottomSpreadsheetExpandedContent.js","components/common/buttons/IconButtonRounded.js","components/common/icons/UndoSvgIcon.js","components/common/icons/RedoSvgIcon.js","components/navigation/UndoRedo.js","components/navigation/SpreadsheetActions.js","components/BottomSpreadsheet.js","components/navigation/SpreadsheetWrapper.js","drawingTool/three/common/Renderer.js","drawingTool/three/common/RenderLoop.js","drawingTool/three/common/OrbitControls.js","drawingTool/three/assets/jpg/Background.jpg","drawingTool/three/common/Textures.js","drawingTool/three/common/MaterialTypes.js","drawingTool/three/common/Materials.js","drawingTool/three/common/SetUp.js","drawingTool/three/common/Camera.js","drawingTool/three/common/Background.js","drawingTool/three/common/CatchPlane.js","drawingTool/three/common/MouseEvents.js","drawingTool/three/common/KeyEvents.js","drawingTool/three/config/RepresentationTypes.js","drawingTool/three/controller/GeometryController.js","drawingTool/three/config/GeometryTypes.js","drawingTool/three/config/OutlineConfig.js","drawingTool/three/geometries/VertexFactory.js","drawingTool/three/config/GraphConfig.js","drawingTool/three/config/WallConfig.js","drawingTool/three/config/DefaultConfig.js","drawingTool/three/config/MagicGuideLineConfig.js","drawingTool/three/geometries/EdgeFactory.js","drawingTool/three/helper/MagicGuideLine.js","drawingTool/three/helper/PreviewVertex.js","drawingTool/three/helper/GroupHelper.js","drawingTool/three/geometries/VertexGroup.js","drawingTool/three/geometries/EdgeGroup.js","drawingTool/three/geometries/Geometry.js","drawingTool/three/geometries/FaceFactory.js","drawingTool/three/helper/GeometryHelper.js","drawingTool/three/geometries/StampGeometry.js","drawingTool/three/helper/PreviewStamp.js","drawingTool/three/geometries/ReferenceEdgeGeometry.js","drawingTool/three/helper/PreviewReferenceEdge.js","drawingTool/three/geometries/SelectionArea.js","drawingTool/three/controller/SelectController.js","drawingTool/three/controller/PolyEdgeController.js","drawingTool/three/geometries/utils/GeometryBasicFunctionsUtils.js","drawingTool/three/geometries/PolygonGeometry.js","drawingTool/three/helper/Offsetting.js","drawingTool/three/factories/PropertiesFactory.js","drawingTool/three/geometries/utils/OffsetGeometryUtils.js","drawingTool/three/geometries/OffsetPolygonGeometry.js","drawingTool/three/geometries/PolylineGeometry.js","drawingTool/three/geometries/OffsetPolylineGeometry.js","drawingTool/three/geometries/PolygraphGeometry.js","drawingTool/three/factories/GeometryFactory.js","drawingTool/three/controller/PolygonController.js","drawingTool/three/controller/OffsetPolygonController.js","drawingTool/three/controller/PolylineController.js","drawingTool/three/controller/OffsetPolylineController.js","drawingTool/three/controller/ReferenceEdgeController.js","drawingTool/three/controller/PolygraphController.js","drawingTool/three/controller/FloorPlanerController.js","drawingTool/three/factories/ControllerFactory.js","drawingTool/three/FloorPlaner.js","components/foto/FotoContent.js","components/mapping/MappingContent.js","utils/urlUtils.js","components/common/icons/NavigationBackSvgIcon.js","components/navigation/BackNavigation.js","components/common/icons/BurgerSvgIcon.js","components/common/TopLevelInfomation.js","components/navigation/AppBarExpandedContent.js","components/common/icons/NavArrowDownSvgIcon.js","components/navigation/submenu/Breadcrumb.js","components/navigation/submenu/BreadcrumbsMenu.js","components/navigation/AppBar.js","components/AppContainer.js","App.js","index.js"],"names":["initialState","test","projectReducer","state","action","type","payload","data","reducers","combineReducers","project","middleware","applyMiddleware","thunk","promise","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","font","fontBold","colors","palette","corporate","yellowMain","yellowDark","neutral","black","white","grayLight","grayMin","shadows","spreadsheet","typography","fontFamily","htmlFontSize","h1","fontSize","color","h2","h6","muiTheme","createTheme","breakpoints","values","xs","sm","md","lg","xl","overrides","MuiChip","label","theme","gridSizes","maxWidth","skeleton","appBar","height","heightExpanded","heightExpandedContent","padding","bottomSpreadsheet","sideSpreadsheet","width","actionsHeight","ExpandSvgIcon","props","xmlns","d","stroke","strokeWidth","fill","strokeLinecap","strokeLinejoin","withStyles","root","actions","marginTop","display","alignItems","expandIcon","justifyContent","rotate","transform","icon","marginRight","withTranslation","classes","clickElement","t","additionalElement","useState","expanded","setExpanded","className","React","cloneElement","onClick","clsx","children","ColoredIconButton","textColor","background","text","fullWidth","disabled","halfWidth","useTheme","IconButton","style","Typography","variant","marginLeft","defaultProps","borderRadius","backgroundColor","boxShadow","border","overflow","paddingTop","paddingBottom","boxSizing","content","divider","title","Divider","IconButtonRounded","iconColor","prototype","PropTypes","any","isRequired","func","string","UndoSvgIcon","fillRule","RedoSvgIcon","undoClick","expandable","redoClick","leftComponent","rightComponent","minHeight","flexDirection","position","bottom","expandedContent","BottomSpreadsheetExpandedContent","console","log","spreadsheetExpandable","resize","mount","renderer","camera","current","clientWidth","clientHeight","left","right","top","updateProjectionMatrix","setSize","start","scene","frameId","requestAnimationFrame","animate","clear","render","orbitControlActions","OrbitControls","object","domElement","undefined","document","enabled","target","Vector3","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","Math","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ORBIT","MOUSE","ZOOM","MIDDLE","PAN","target0","clone","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","reset","scope","copy","dispatchEvent","changeEvent","update","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","max","min","makeSafe","radius","scale","add","panOffset","setFromSpherical","lookAt","set","zoomChanged","distanceToSquared","EPS","dot","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","multiplyScalar","panUp","pan","deltaX","deltaY","element","body","Object","getPrototypeOf","isPerspectiveCamera","targetDistance","length","tan","fov","matrix","isOrthographicCamera","warn","dollyIn","dollyScale","dollyOut","event","preventDefault","button","clientX","clientY","handleMouseDownRotate","handleMouseDownDolly","handleMouseDownPan","addEventListener","subVectors","x","y","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","pageX","pageY","handleTouchStartRotate","dx","dy","sqrt","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","this","value","EventDispatcher","textureTypes","materialTypes","materialColors","materials","MeshBasicMaterial","map","textureType","textureLoader","TextureLoader","load","backgroundImage","texture","wrapS","wrapT","RepeatWrapping","repeat","getTexture","transparent","name","visible","selectionArea","opacity","pink","green","cyan","blue","orange","default","depthWrite","getMaterial","materialType","setUp","Scene","WebGLRenderer","antialias","setClearColor","setPixelRatio","devicePixelRatio","getRenderer","appendChild","OrthographicCamera","z","getOrthographicCamera","raycaster","Raycaster","orbitControls","getOrbitControls","geometry","PlaneBufferGeometry","material","mesh","Mesh","addBackground","addCatchPlane","cleanUp","currentMount","cancelAnimationFrame","stop","removeChild","mouseEvent","addMouseEvents","keyEvents","addKeyEvents","onKeyUp","keyCodes","representationTypes","select","outline","wall","door","graph","magicGuideLine","controllerActions","GeometryController","floorPlanerController","representationType","group","currentGeometries","remove","removeGeometryFromCurrentGeometries","includes","index","findIndex","geo","uuid","splice","geometryTypes","outlineConfig","vertex","innerActiveMaterial","innerInactiveMaterial","outerActiveMaterial","outerInactiveMaterial","innerSize","outerSize","innerSegments","outerSegments","edge","properties","offsetLeft","offsetRight","vertexGeometryStore","Map","getVertexGeometryFromStore","size","segments","toFixed","has","get","CircleBufferGeometry","Vertex","config","getVertexConfigByRepresentationType","innerGeometry","outerGeometry","callbacks","innerMesh","geometryType","edges","push","edgeIndex","indexOf","movement","active","currentGeometry","parent","rootGeometry","forEach","callback","filter","c","graphConfig","wallConfig","defaultConfig","magicGuideLineConfig","edgeGeometryStore","getEdgeGeometry","Edge","startVertex","endVertex","getEdgeConfigByRepresentationType","vertices","addEdge","startPosition","endPosition","startV2","endV2","direction","distanceTo","center","addScaledVector","rotation","rotateZ","noteOffset","startX","startY","endX","endY","ap","ab","normalize","point","getOffsets","offsetMiddle","rotateAround","MathUtils","degToRad","getNearestPositionOnEdge","Number","MAX_VALUE","find","getVertices","orientationTypes","MagicGuideLine","startVertexVertical","endVertexVertical","vertical","setActive","startVertexHorizontal","endVertexHorizontal","horizontal","orientationType","updateVertical","updateHorizontal","updateScale","Group","getSnappingPosition","otherPositions","autoSnap","snapDistance","ctrlKey","metaKey","getNearestVerticesValuesAsPosition","nearestVerticalDistance","nearestVerticalPosition","nearestHorizontalDistance","nearestHorizontalPosition","orientation","otherPosition","verticalDistance","abs","horizontalDistance","setOrientation","previewVertex","previewRepresentationTypes","PreviewVertex","setPreviewVertexActive","setRepresentationType","insertChildIntoParent","child","addAllChildrenToOtherGroup","otherGroup","i","VertexGroup","currentScale","edgeGroup","getRepresentationType","getEdges","updateEdge","moveDelta","updateAllEdges","removeEdge","uuids","findVertexByUuid","startEdge","startVertices","currentVertex","breakWhile","nextEdge","verticesJSON","json","EdgeGroup","vertexGroup","newEdge","neighborVertices","newVertex","addVertex","previousEdge","updateEdgeCallback","currentDistance","nearestEdge","getDistanceToEdge","verticesUuids","findVerticesByUuids","flat","edgesJSON","defaultActions","idle","Geometry","geometryActions","setEdgeGroup","assign","currentAction","setAction","geometryJSON","isValidate","errors","toJSON","fromJSON","createFaceBufferGeometry","holes","face","Shape","moveTo","lineTo","hole","holePath","Path","ShapeBufferGeometry","Face","getFaceConfigByRepresentationType","faceGeometry","inactiveMaterial","activeMaterial","lengthSq","doorDecoGeometry","absarc","createDoorDecoGeometry","isPolygonClockwise","result","getResult","getVerticesByWidthAndHeight","stampActions","drag","StampGeometry","getStampConfigByRepresentationType","depth","deco","setDecorationMeshes","decorations","PreviewStamp","removeAllChildrenFromParent","updateStamp","referenceEdgeActions","ReferenceEdgeGeometry","referenceEdge","referenceVertex","updateGeometry","tryReconnectToParentGeometry","unsubscribe","subscribe","isConnectToVertex","setReferenceVertex","setReferenceEdge","absolute","relative","getLength","updateReferenceEdge","getDirectionFromVertex","getAngle","getGeometry","getOffset","previewReferenceEdge","PreviewReferenceEdge","setPreviewReferenceEdgeActive","SelectionArea","minDraggedDistance","updateArea","leftTop","rightBottom","isRectangleContainsVertex","SelectController","selectableRepresentationTypes","draggedSelectionArea","currentPosition","getCurrentPosition","setStartPosition","isActive","unselectGeometriesByStartDraggingSelectionArea","getGeometries","geometriesToSelect","getContainsVertices","getAllVertices","geometriesToUnselect","isDragged","geometries","getRaycastHitObjectsByRepresentationTypes","PolyEdgeController","draggedVertex","onMouseMovePreviewVertex","onMouseMoveCurrentGeometry","getAction","raycastHitObject","getRaycastHitObjectForGeometryByGeometryTypes","lastVertex","getLastVertex","updateVertex","getMouseDeltaMovement","dragVertex","minVerticesCount","getVerticesCount","close","startDragPosition","removeGeometryFromGroup","removeLastVertex","ignoreVertex","getAllVerticesPositions","getVertexByIndex","addVertexToEdge","getPositions","removeVertex","moveDeltaAllVertices","setDraggedVertex","getCount","polygonActions","selectVertex","PolygonGeometry","isClockwiseHelper","createFaceBufferGeometryRingOffset","offsetOutward","offsetInward","inwardVertices","getOffsetByRingVertices","outwardVertices","tmp","innerVertices","outerVertices","createFaceBufferGeometryLinearOffset","faceVertices","getOffsetByLinearVertices","concat","reverse","offsetBuffer","BufferAttribute","Float32Array","getOffsetPositionBetweenVertices","startVertex2","endVertex2","point2","previousVertex","nextVertex","v1","v2","hA","tA","shift","shiftMatrix","Matrix4","rotationMatrix","cos","sin","translationMatrix","cloneOffset","applyMatrix4","getX","getY","getPropertiesByRepresentationType","offsetGeometry","setOffset","hasOwnProperty","shiftOffsetToLeft","offsetHalf","shiftOffsetToRight","addToOffset","step","OffsetPolygonGeometry","updateOffsetFace","offsetFace","createOffsetFace","verticesPositions","getNearestEdgeToPosition","updateAllEdgesCallbacks","polylineActions","PolylineGeometry","removeEdges","OffsetPolylineGeometry","polygraphActions","PolygraphGeometry","getLastEdge","getEdgeByIndex","setVertexOrder","ownVertex","polygraph","lastVertexFromOtherPolygraph","previousVertexFromOtherPolygraph","ownEdge","createGeometryByRepresentationType","new","OffsetPolygonController","offsetPolygon","closingDistance","onLeftMouseDownEdit","onLeftMouseDownNew","polygon","getFirstVertex","PolylineController","polyline","OffsetPolylineController","offsetPolyline","ReferenceEdgeController","getEdgeAndPosition","move","addWidth","altKey","getRaycastHitObjectByRepresentationTypes","delta","PolygraphController","childGeometry","getRaycastHitObjectByRepresentationTypesAndGeometryType","parentGeometryFromVertex","extendAtVertex","parentGeometryFromEdge","extendAtEdge","childGeometryType","connectLastVertexToOwnVertex","mergeToOwnVertex","connectLastVertexToOwnEdge","mergeToOwnEdge","onLeftMouseDownSelect","FloorPlanerController","repTypes","representationGroups","representationController","catchPlane","currentTool","lastCameraZoom","isActionExecuted","selectController","previewStamp","updateCamera","setUpRepresentationTypeGroup","setUpRepresentationTypeController","representTypes","controller","createControllerByRepresentationType","detail","callFunctionPrimaryForCurrentGeometries","callFunctionForSelection","storeCurrentPosition","callFunctionForAllRepresentationTypes","code","changeTool","callFunctionForCurrentGeometries","resetCamera","info","cancelCurrentActions","controllerFunction","callFunctionForCurrentRepresentationType","executeAction","updateGeometryScale","currentCameraZoom","geometryScale","minZoomLevel","maxZoomLevel","offsetTop","setFromCamera","intersect","intersectObject","ignoreGeometryTypes","getRaycastHitObjectByAttribute","ignoreGeometries","getGeometriesByRepresentationTypes","attribute","types","multiple","intersections","intersectObjects","raycastHitObjects","Array","from","geometryUuid","edgeUuid","findEdgeByUuid","vertexUuid","getVerticesPositions","geometryInstance","getEdgeByUuid","getVertexByUuid","alert","resetZoomLevel","floorPlaner","canvasContaienr","useRef","rendererRef","cameraRef","useEffect","setGeometries","deconstructor","bounds","onResize","measureRef","ref","tabIndex","URL_FOTO","URL_MAPPING","URL_WINDOW","NavigationBackSvgIcon","margin","alignSelf","cursor","backLabel","onNavigateBack","BurgerSvgIcon","flexItem","flex","burgerIcon","NavArrowDownSvgIcon","primary","Chip","menuItem","history","useHistory","activeBreadCrumb","setActiveBreadCrumb","onBreadcrumbClick","breadcrumbIndex","url","route","Breadcrumbs","contentTitle","contentDescription","appContainer","location","pathname","getContentTitle","path","component","FotoContent","MappingContent","WindowContent","App","ThemeProvider","AppContainer","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.36fe62d0.chunk.js","sourcesContent":["const initialState = {\n    test: '',\n}\n\nfunction projectReducer (state = initialState, action) {\n\n    switch (action.type) {\n\n        case 'TEST_FULFILLED':\n            return {\n                ...state,\n                test: action.payload.data,\n            }\n\n        default:\n            return state\n\n    }\n\n}\n\nexport default projectReducer","import {combineReducers} from 'redux'\nimport projectReducer from \"./project-reducer\";\n\nconst reducers = combineReducers({\n    project: projectReducer\n});\n\nexport default reducers","import { applyMiddleware, compose, createStore } from 'redux'\nimport reducers from './reducers'\nimport promise from 'redux-promise-middleware'\nimport thunk from 'redux-thunk'\n\nconst middleware = applyMiddleware(thunk, promise)\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst enhancer = composeEnhancers(middleware)\n\nconst store = createStore(reducers, enhancer)\n\nexport default store\n","import {createTheme} from '@material-ui/core';\n\nconst font = \"'FrutigerNext'\";\nconst fontBold = \"'FrutigerNextBold'\";\n\nexport const colors = {\n    palette: {\n        corporate: {\n            yellowMain: '#ffd700',\n            yellowDark: '#fbc300',\n        },\n        neutral: {\n            black: '#333333',\n\n            white: '#ffffff',\n\n            grayLight: '#f7f7f7',\n            grayMin: '#e4e3e3',\n        },\n    },\n    shadows: {\n        spreadsheet: '0 -2px 18px 0 rgba(100, 92, 82, 0.1)'\n    }\n}\n\nexport const typography = {\n    fontFamily: [font, fontBold],\n    htmlFontSize: 10,\n    h1: {\n        fontSize: '36px',\n        fontFamily: fontBold,\n        color: colors.palette.neutral.black,\n    },\n    h2: {\n        fontSize: '17px',\n        fontFamily: fontBold,\n        color: colors.palette.neutral.black,\n    },\n    h6: {\n        fontFamily: font,\n        fontSize: '17px',\n        color: colors.palette.neutral.black,\n    },\n}\n\n\nconst muiTheme = createTheme({\n    colors: colors,\n    breakpoints: {\n        values: {\n            xs: 0,\n            sm: 375,\n            md: 415,\n            lg: 768,\n            xl: 1024,\n        },\n    },\n    palette: {},\n    typography: typography,\n    overrides: {\n        MuiChip: {\n            label: typography.h6,\n        },\n    },\n})\n\n\nconst theme = {\n    ...muiTheme,\n    gridSizes: {\n        maxWidth: '800px',\n    },\n    skeleton: {\n        appBar: {\n            height: '116px',\n            heightExpanded: '226px',\n            heightExpandedContent: '110px',\n            padding: '15px 24px 20px 24px',\n        },\n        bottomSpreadsheet: {\n            height: '95px',\n            heightExpanded: '247px',\n            heightExpandedContent: '162px',\n            padding: '10px 24px 16px 24px',\n        },\n        sideSpreadsheet: {\n            width: '438px',\n            padding: '36px',\n            actionsHeight: '114px'\n        }\n    },\n\n}\n\nexport default theme\n","import * as React from \"react\"\n\nfunction ExpandSvgIcon(props) {\n    return (\n        <svg width={34} height={9} xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n            <path\n                d=\"M2 7l15-5 15 5\"\n                stroke=\"#DCDCDC\"\n                strokeWidth={4}\n                fill=\"none\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    )\n}\n\nexport default ExpandSvgIcon","import {withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport ExpandSvgIcon from \"./icons/ExpandSvgIcon\";\n\nconst styles = theme => ({\n    root: {},\n    actions: {\n        marginTop: '17px',\n        display: 'flex',\n        alignItems: 'center'\n    },\n    expandIcon: {\n        display: 'flex',\n        justifyContent: 'center',\n        width: '100%'\n    },\n    rotate: {\n        transform: 'rotate(180deg)'\n    },\n    icon: {\n        marginRight: '6px'\n    }\n})\n\nfunction Expandable({classes, t, clickElement, additionalElement, ...props}) {\n    const [expanded, setExpanded] = useState(false);\n\n    return (\n        <div className={classes.root}>\n            <div className={additionalElement ? classes.actions : classes.expandIcon}>\n                {clickElement\n                    ? React.cloneElement(clickElement, {\n                        onClick: () => setExpanded(!expanded),\n                        className: expanded ? classes.rotate : '',\n                    })\n                    :\n                    <ExpandSvgIcon onClick={() => setExpanded(!expanded)}\n                                   className={clsx(classes.icon, expanded ? classes.rotate : '')}/>\n                }\n                {additionalElement}\n            </div>\n            {expanded && props.children}\n        </div>\n    )\n}\n\nExpandable.propTypes = {\n    clickElement: PropTypes.element,\n    additionalElement: PropTypes.element,\n}\n\nexport default compose(withStyles(styles), withTranslation())(Expandable)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {IconButton, Typography, useTheme, withStyles} from \"@material-ui/core\";\nimport * as theme from \"../../../theme\";\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        borderRadius: '12px',\n        height: '48px',\n        backgroundColor: theme.colors.palette.corporate.yellowMain,\n        boxShadow: '0 2px 14px 0 rgba(210, 179, 13, 0.42)',\n        border: 'solid 1px rgba(255, 193, 0, 0.5)'\n    },\n    icon: {\n        width: '2.4rem',\n        height: '2.4rem',\n        overflow: 'hidden',\n    },\n});\n\nfunction ColoredIconButton({\n                               textColor,\n                               background,\n                               icon,\n                               text,\n                               onClick,\n                               classes,\n                               className,\n                               fullWidth,\n                               disabled,\n                               halfWidth,\n                               ...props\n                           }) {\n\n    const theme = useTheme()\n    textColor = textColor ? textColor : theme.colors.palette.neutral.black\n    return (\n        <IconButton className={clsx(classes.root, className)}\n                    onClick={onClick}\n                    {...props}\n                    disabled={disabled}\n                    style={{\n                        background: disabled ? theme.colors.palette.neutral.grayMin : background,\n                        width: fullWidth ? '100%' : halfWidth ? '50%' : '',\n                    }}>\n            {icon ? <div\n                className={classes.icon}>{React.cloneElement(icon, {stroke: textColor})}</div> : null}\n            {text ? <Typography variant={'h2'} style={{color: textColor, marginLeft: '7px'}}>{text}</Typography> : null}\n        </IconButton>\n    );\n}\n\nColoredIconButton.propTypes = {\n    text: PropTypes.string,\n    icon: PropTypes.element,\n    textColor: PropTypes.string,\n    background: PropTypes.string,\n    onClick: PropTypes.func,\n}\n\nColoredIconButton.defaultProps = {\n    textColor: theme.colors.palette.neutral.black,\n    background: theme.colors.palette.corporate.yellowMain,\n}\n\nexport default withStyles(styles)(ColoredIconButton);","import {compose} from \"redux\";\nimport {Divider, withStyles} from \"@material-ui/core\";\nimport {withTranslation} from \"react-i18next\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\n\nconst styles = theme => ({\n    root: {\n        paddingTop: '18px',\n        paddingBottom: '30px',\n        boxSizing: 'border-box',\n        height: theme.skeleton.bottomSpreadsheet.heightExpandedContent,\n    },\n    content: {\n        height: '100%'\n    },\n    divider: {}\n})\n\nfunction AppBarExpandedContent({classes, t, title, text, content, ...props}) {\n    return (\n        <div className={clsx(classes.root)}>\n            <div className={classes.content}>\n                {content}\n            </div>\n            <Divider className={classes.divider}/>\n        </div>\n    )\n}\n\nAppBarExpandedContent.propTypes = {\n    title: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    content: PropTypes.element\n}\n\nexport default compose(withStyles(styles), withTranslation())(AppBarExpandedContent)\n","import {IconButton, withStyles} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport * as theme from \"../../../theme\";\n\nconst styles = theme => ({\n    root: {\n        borderRadius: '50%',\n        width: '40px',\n        height: '40px',\n        border: 'solid 1px ' + theme.colors.palette.neutral.grayMin,\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.15)'\n    },\n    icon: {\n        width: '32px',\n        height: '32px',\n    }\n})\n\nfunction IconButtonRounded({classes, icon, className, onClick, disabled, background, iconColor, ...props}) {\n    return (\n        <IconButton className={clsx(classes.root, className)}\n                    onClick={onClick}\n                    {...props}\n                    disabled={disabled}>\n            {icon &&\n            <div className={classes.icon}>\n                {React.cloneElement(icon, {stroke: disabled ? theme.colors.palette.neutral.grayMin : iconColor})}\n            </div>}\n        </IconButton>\n    )\n}\n\nIconButtonRounded.prototype = {\n    icon: PropTypes.any.isRequired,\n    onClick: PropTypes.func,\n    iconColor: PropTypes.string,\n    background: PropTypes.string,\n}\n\n\nIconButtonRounded.defaultProps = {\n    iconColor: theme.colors.palette.neutral.black,\n    background: theme.colors.palette.neutral.white,\n}\n\n\nexport default withStyles(styles)(IconButtonRounded)","import * as React from \"react\"\n\nfunction UndoSvgIcon(props) {\n    return (\n        <svg width={32} height={32} xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n            <g stroke={props.stroke || '#333'} strokeWidth={2} fill=\"none\" fillRule=\"evenodd\">\n                <path d=\"M7.5 10h9a8 8 0 110 16\"/>\n                <path d=\"M11 6l-4 4 4 4\"/>\n            </g>\n        </svg>\n    )\n}\n\nexport default UndoSvgIcon","import * as React from \"react\"\n\nfunction RedoSvgIcon(props) {\n    return (\n        <svg width={32} height={32} xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n            <g stroke={props.stroke || '#333'} strokeWidth={2} fill=\"none\" fillRule=\"evenodd\">\n                <path d=\"M24 10h-9a8 8 0 100 16\"/>\n                <path d=\"M20.5 6l4 4-4 4\"/>\n            </g>\n        </svg>\n    )\n}\n\nexport default RedoSvgIcon","import {withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport PropTypes from \"prop-types\";\nimport IconButtonRounded from \"../common/buttons/IconButtonRounded\";\nimport UndoSvgIcon from \"../common/icons/UndoSvgIcon\";\nimport RedoSvgIcon from \"../common/icons/RedoSvgIcon\";\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n})\n\nfunction UndoRedo({classes, t, expandable, undoClick, redoClick, ...props}) {\n    return (\n        <div className={classes.root}>\n            <IconButtonRounded icon={<UndoSvgIcon/>} onClick={undoClick}/>\n            <IconButtonRounded disabled icon={<RedoSvgIcon/>} onClick={redoClick}/>\n        </div>\n    )\n}\n\nUndoRedo.propTypes = {\n    undoClick: PropTypes.func.isRequired,\n    redoClick: PropTypes.func.isRequired,\n}\n\nexport default compose(withStyles(styles), withTranslation())(UndoRedo)","import {withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\n\nconst styles = theme => ({\n    root: {\n        boxSizing: 'border-box',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n    },\n})\n\nfunction SpreadsheetActions({classes, t, leftComponent, rightComponent, className, ...props}) {\n    return (\n        <div className={clsx(classes.root, className)}>\n            {leftComponent ? leftComponent : <div/>}\n            {rightComponent ? rightComponent : <div/>}\n        </div>\n    )\n}\n\nSpreadsheetActions.propTypes = {\n    leftComponent: PropTypes.element,\n    rightComponent: PropTypes.element\n}\n\nexport default compose(withStyles(styles), withTranslation())(SpreadsheetActions)","import {withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport Expandable from \"./common/Expandable\";\nimport ColoredIconButton from \"./common/buttons/ColoredIconButton\";\nimport BottomSpreadsheetExpandedContent from \"./navigation/BottomSpreadsheetExpandedContent\";\nimport PropTypes from \"prop-types\";\nimport UndoRedo from \"./navigation/UndoRedo\";\nimport SpreadsheetActions from \"./navigation/SpreadsheetActions\";\n\nconst styles = theme => ({\n    root: {\n        background: theme.colors.palette.neutral.grayLight,\n        minHeight: theme.skeleton.bottomSpreadsheet.height,\n        borderRadius: '30px 30px 0 0',\n        boxShadow: theme.colors.shadows.spreadsheet,\n        border: 'solid 1px ' + theme.colors.palette.neutral.grayMin,\n        padding: theme.skeleton.bottomSpreadsheet.padding,\n        boxSizing: 'border-box',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        position: 'absolute',\n        bottom: 0,\n        width: '100vw'\n    },\n    actions: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n    }\n})\n\nfunction BottomSpreadsheet({classes, t, expandable, expandedContent, ...props}) {\n    return (\n        <div className={classes.root}>\n            {expandable &&\n            <Expandable>\n                <BottomSpreadsheetExpandedContent content={expandedContent}/>\n            </Expandable>}\n            <SpreadsheetActions\n                leftComponent={<UndoRedo undoClick={() => console.log('undo')} redoClick={() => console.log('redo')}/>}\n                rightComponent={<ColoredIconButton text={t('continue')} halfWidth/>}/>\n        </div>\n    )\n}\n\nBottomSpreadsheet.propTypes = {\n    expandable: PropTypes.bool,\n    expandedContent: PropTypes.element\n}\n\nexport default compose(withStyles(styles), withTranslation())(BottomSpreadsheet)","import {withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport React from \"react\";\nimport BottomSpreadsheet from \"../BottomSpreadsheet\";\nimport PropTypes from \"prop-types\";\n\nconst styles = theme => ({\n    root: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n    },\n})\n\nfunction SpreadsheetWrapper({classes, t, spreadsheetExpandable, expandedContent, ...props}) {\n    return (\n        <div className={classes.root}>\n            <div className={classes.root}>\n                {props.children}\n            </div>\n            <BottomSpreadsheet expandable={spreadsheetExpandable} expandedContent={expandedContent}/>\n        </div>\n    )\n}\n\nSpreadsheetWrapper.propTypes = {\n    spreadsheetExpandable: PropTypes.bool,\n    expandedContent: PropTypes.element\n}\n\nexport default compose(withStyles(styles), withTranslation())(SpreadsheetWrapper)","import {WebGLRenderer} from 'three'\n\nexport function getRenderer() {\n    const renderer = new WebGLRenderer({antialias: true})\n\n    renderer.setClearColor('#cdd0d6')\n    renderer.setPixelRatio(window.devicePixelRatio)\n\n    return renderer\n}\n\nexport function resize(mount, renderer, camera) {\n    if (!mount || !renderer || !camera)\n        return\n\n    const {clientWidth, clientHeight} = mount.current\n\n    if (camera) {\n        camera.left = clientWidth / -16\n        camera.right = clientWidth / 16\n        camera.top = clientHeight / 16\n        camera.bottom = clientHeight / -16\n        camera.updateProjectionMatrix()\n    }\n\n    renderer.setSize(clientWidth, clientHeight)\n}","export function start(renderer, scene, camera) {\n\n    const frameId = {\n        frameId: null\n    }\n\n    frameId.frameId = requestAnimationFrame(() => animate(renderer, scene, camera, frameId))\n\n    return frameId\n}\n\nexport function stop({frameId}) {\n    return cancelAnimationFrame(frameId)\n}\n\nfunction animate(renderer, scene, camera, frameId) {\n    renderer.clear('#ddd')\n    renderer.render(scene, camera)\n\n    frameId.frameId = requestAnimationFrame(() => animate(renderer, scene, camera, frameId))\n}\n","import {EventDispatcher, MOUSE, Quaternion, Spherical, Vector2, Vector3} from 'three'\n\nexport const orbitControlActions = {\n    change: 'change',\n}\n\nexport function getOrbitControls(camera, renderer) {\n    const orbitControls = new OrbitControls(camera, renderer.domElement)\n    orbitControls.enableRotate = false\n    orbitControls.enableKeys = false\n    orbitControls.minZoom = .5\n    orbitControls.maxZoom = 8\n    orbitControls.mouseButtons = {ZOOM: MOUSE.MIDDLE, PAN: MOUSE.RIGHT}\n\n    orbitControls.target.set(0, 0)\n    orbitControls.update()\n\n    return orbitControls\n}\n\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\nclass OrbitControls extends EventDispatcher {\n    constructor(object, domElement) {\n        super()\n\n        this.object = object\n\n        this.domElement = (domElement !== undefined) ? domElement : document\n\n        // Set to false to disable this control\n        this.enabled = true\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3()\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0\n        this.maxDistance = Infinity\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0\n        this.maxZoom = Infinity\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0 // radians\n        this.maxPolarAngle = Math.PI // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n        this.minAzimuthAngle = -Infinity // radians\n        this.maxAzimuthAngle = Infinity // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false\n        this.dampingFactor = 0.25\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true\n        this.zoomSpeed = 1.0\n\n        // Set to false to disable rotating\n        this.enableRotate = true\n        this.rotateSpeed = 1.0\n\n        // Set to false to disable panning\n        this.enablePan = true\n        this.keyPanSpeed = 7.0 // pixels moved per arrow key push\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false\n        this.autoRotateSpeed = 2.0 // 30 seconds per round when fps is 60\n\n        // Set to false to disable use of the keys\n        this.enableKeys = true\n\n        // The four arrow keys\n        this.keys = {\n            LEFT: 37,\n            UP: 38,\n            RIGHT: 39,\n            BOTTOM: 40,\n        }\n\n        // Mouse buttons\n        this.mouseButtons = {\n            ORBIT: MOUSE.LEFT,\n            ZOOM: MOUSE.MIDDLE,\n            PAN: MOUSE.RIGHT,\n        }\n\n        // for reset\n        this.target0 = this.target.clone()\n        this.position0 = this.object.position.clone()\n        this.zoom0 = this.object.zoom\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = () => spherical.phi\n\n        this.getAzimuthalAngle = () => spherical.theta\n\n        this.reset = function () {\n            scope.target.copy(scope.target0)\n            scope.object.position.copy(scope.position0)\n            scope.object.zoom = scope.zoom0\n\n            scope.object.updateProjectionMatrix()\n            scope.dispatchEvent(changeEvent)\n\n            scope.update()\n\n            state = STATE.NONE\n        }\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = (function () {\n            var offset = new Vector3()\n\n            // so camera.up is the orbit axis\n            var quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0))\n            var quatInverse = quat.clone()\n                .invert()\n\n            var lastPosition = new Vector3()\n            var lastQuaternion = new Quaternion()\n\n            return function update() {\n                var position = scope.object.position\n\n                offset.copy(position)\n                    .sub(scope.target)\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion(quat)\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3(offset)\n\n                if (scope.autoRotate && state === STATE.NONE) {\n                    rotateLeft(getAutoRotationAngle())\n                }\n\n                spherical.theta += sphericalDelta.theta\n                spherical.phi += sphericalDelta.phi\n\n                // restrict theta to be between desired limits\n                spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta))\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi))\n\n                spherical.makeSafe()\n\n                spherical.radius *= scale\n\n                // restrict radius to be between desired limits\n                spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius))\n\n                // move target to panned location\n                scope.target.add(panOffset)\n\n                offset.setFromSpherical(spherical)\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion(quatInverse)\n\n                position.copy(scope.target)\n                    .add(offset)\n\n                scope.object.lookAt(scope.target)\n\n                if (scope.enableDamping === true) {\n                    sphericalDelta.theta *= (1 - scope.dampingFactor)\n                    sphericalDelta.phi *= (1 - scope.dampingFactor)\n                } else {\n                    sphericalDelta.set(0, 0, 0)\n                }\n\n                scale = 1\n                panOffset.set(0, 0, 0)\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if (zoomChanged ||\n                    lastPosition.distanceToSquared(scope.object.position) > EPS ||\n                    8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n                    scope.dispatchEvent(changeEvent)\n\n                    lastPosition.copy(scope.object.position)\n                    lastQuaternion.copy(scope.object.quaternion)\n                    zoomChanged = false\n\n                    return true\n                }\n\n                return false\n            }\n        }())\n\n        this.dispose = function () {\n            scope.domElement.removeEventListener('contextmenu', onContextMenu, false)\n            scope.domElement.removeEventListener('mousedown', onMouseDown, false)\n            scope.domElement.removeEventListener('wheel', onMouseWheel, false)\n\n            scope.domElement.removeEventListener('touchstart', onTouchStart, false)\n            scope.domElement.removeEventListener('touchend', onTouchEnd, false)\n            scope.domElement.removeEventListener('touchmove', onTouchMove, false)\n\n            document.removeEventListener('mousemove', onMouseMove, false)\n            document.removeEventListener('mouseup', onMouseUp, false)\n\n            window.removeEventListener('keydown', onKeyDown, false)\n\n        }\n\n        //\n        // internals\n        //\n\n        var scope = this\n\n        var changeEvent = {\n            type: 'change',\n        }\n        var startEvent = {\n            type: 'start',\n        }\n        var endEvent = {\n            type: 'end',\n        }\n\n        var STATE = {\n            NONE: -1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_DOLLY: 4,\n            TOUCH_PAN: 5,\n        }\n\n        var state = STATE.NONE\n\n        var EPS = 0.000001\n\n        // current position in spherical coordinates\n        var spherical = new Spherical()\n        var sphericalDelta = new Spherical()\n\n        var scale = 1\n        var panOffset = new Vector3()\n        var zoomChanged = false\n\n        var rotateStart = new Vector2()\n        var rotateEnd = new Vector2()\n        var rotateDelta = new Vector2()\n\n        var panStart = new Vector2()\n        var panEnd = new Vector2()\n        var panDelta = new Vector2()\n\n        var dollyStart = new Vector2()\n        var dollyEnd = new Vector2()\n        var dollyDelta = new Vector2()\n\n        function getAutoRotationAngle() {\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed\n        }\n\n        function getZoomScale() {\n            return Math.pow(0.95, scope.zoomSpeed)\n        }\n\n        function rotateLeft(angle) {\n            sphericalDelta.theta -= angle\n        }\n\n        function rotateUp(angle) {\n            sphericalDelta.phi -= angle\n        }\n\n        var panLeft = (function () {\n            var v = new Vector3()\n\n            return function panLeft(distance, objectMatrix) {\n                v.setFromMatrixColumn(objectMatrix, 0) // get X column of objectMatrix\n                v.multiplyScalar(-distance)\n\n                panOffset.add(v)\n            }\n        }())\n\n        var panUp = (function () {\n            var v = new Vector3()\n\n            return function panUp(distance, objectMatrix) {\n                v.setFromMatrixColumn(objectMatrix, 1) // get Y column of objectMatrix\n                v.multiplyScalar(distance)\n\n                panOffset.add(v)\n            }\n        }())\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        var pan = (function () {\n            var offset = new Vector3()\n\n            return function pan(deltaX, deltaY) {\n                var element = scope.domElement === document ? scope.domElement.body : scope.domElement\n\n                if (Object.getPrototypeOf(scope.object).isPerspectiveCamera) {\n                    // perspective\n                    var position = scope.object.position\n                    offset.copy(position)\n                        .sub(scope.target)\n                    var targetDistance = offset.length()\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan((scope.object.fov / 2) * Math.PI / 180.0)\n\n                    // we actually don't use screenWidth, since perspective camera is fixed to screen height\n                    panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix)\n                    panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix)\n                } else if (Object.getPrototypeOf(scope.object).isOrthographicCamera) {\n                    // orthographic\n                    panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix)\n                    panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix)\n                } else {\n                    // camera neither orthographic nor perspective\n                    console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.')\n                    scope.enablePan = false\n                }\n            }\n        }())\n\n        function dollyIn(dollyScale) {\n            if (Object.getPrototypeOf(scope.object).isPerspectiveCamera) {\n                scale /= dollyScale\n            } else if (Object.getPrototypeOf(scope.object).isOrthographicCamera) {\n                scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale))\n                scope.object.updateProjectionMatrix()\n                zoomChanged = true\n            } else {\n                console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')\n                scope.enableZoom = false\n            }\n        }\n\n        function dollyOut(dollyScale) {\n            if (Object.getPrototypeOf(scope.object).isPerspectiveCamera) {\n                scale *= dollyScale\n            } else if (Object.getPrototypeOf(scope.object).isOrthographicCamera) {\n                scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale))\n                scope.object.updateProjectionMatrix()\n                zoomChanged = true\n            } else {\n                console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')\n                scope.enableZoom = false\n            }\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate(event) {\n            // console.log( 'handleMouseDownRotate' );\n\n            rotateStart.set(event.clientX, event.clientY)\n        }\n\n        function handleMouseDownDolly(event) {\n            // console.log( 'handleMouseDownDolly' );\n\n            dollyStart.set(event.clientX, event.clientY)\n        }\n\n        function handleMouseDownPan(event) {\n            // console.log( 'handleMouseDownPan' );\n\n            panStart.set(event.clientX, event.clientY)\n        }\n\n        function handleMouseMoveRotate(event) {\n            // console.log( 'handleMouseMoveRotate' );\n\n            rotateEnd.set(event.clientX, event.clientY)\n            rotateDelta.subVectors(rotateEnd, rotateStart)\n\n            var element = scope.domElement === document ? scope.domElement.body : scope.domElement\n\n            // rotating across whole screen goes 360 degrees around\n            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed)\n\n            // rotating up and down along whole screen attempts to go 360, but limited to 180\n            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed)\n\n            rotateStart.copy(rotateEnd)\n\n            scope.update()\n        }\n\n        function handleMouseMoveDolly(event) {\n            // console.log( 'handleMouseMoveDolly' );\n\n            dollyEnd.set(event.clientX, event.clientY)\n\n            dollyDelta.subVectors(dollyEnd, dollyStart)\n\n            if (dollyDelta.y > 0) {\n                dollyIn(getZoomScale())\n            } else if (dollyDelta.y < 0) {\n                dollyOut(getZoomScale())\n            }\n\n            dollyStart.copy(dollyEnd)\n\n            scope.update()\n        }\n\n        function handleMouseMovePan(event) {\n            // console.log( 'handleMouseMovePan' );\n\n            panEnd.set(event.clientX, event.clientY)\n\n            panDelta.subVectors(panEnd, panStart)\n\n            pan(panDelta.x, panDelta.y)\n\n            panStart.copy(panEnd)\n\n            scope.update()\n        }\n\n        function handleMouseWheel(event) {\n            // console.log( 'handleMouseWheel' );\n\n            if (event.deltaY < 0) {\n                dollyOut(getZoomScale())\n            } else if (event.deltaY > 0) {\n                dollyIn(getZoomScale())\n            }\n\n            scope.update()\n        }\n\n        function handleKeyDown(event) {\n            // console.log( 'handleKeyDown' );\n\n            switch (event.keyCode) {\n                case scope.keys.UP:\n                    pan(0, scope.keyPanSpeed)\n                    scope.update()\n                    break\n\n                case scope.keys.BOTTOM:\n                    pan(0, -scope.keyPanSpeed)\n                    scope.update()\n                    break\n\n                case scope.keys.LEFT:\n                    pan(scope.keyPanSpeed, 0)\n                    scope.update()\n                    break\n\n                case scope.keys.RIGHT:\n                    pan(-scope.keyPanSpeed, 0)\n                    scope.update()\n                    break\n\n                default:\n                // do nothing\n            }\n        }\n\n        function handleTouchStartRotate(event) {\n            rotateStart.set(event.touches[0].pageX, event.touches[0].pageY)\n        }\n\n        function handleTouchStartDolly(event) {\n\n            let dx = event.touches[0].pageX - event.touches[1].pageX\n            let dy = event.touches[0].pageY - event.touches[1].pageY\n\n            let distance = Math.sqrt(dx * dx + dy * dy)\n\n            dollyStart.set(0, distance)\n        }\n\n        function handleTouchStartPan(event) {\n            panStart.set(event.touches[0].pageX, event.touches[0].pageY)\n        }\n\n        function handleTouchMoveRotate(event) {\n\n            rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY)\n            rotateDelta.subVectors(rotateEnd, rotateStart)\n\n            let element = scope.domElement === document ? scope.domElement.body : scope.domElement\n\n            // rotating across whole screen goes 360 degrees around\n            rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed)\n\n            // rotating up and down along whole screen attempts to go 360, but limited to 180\n            rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed)\n\n            rotateStart.copy(rotateEnd)\n\n            scope.update()\n        }\n\n        function handleTouchMoveDolly(event) {\n            // console.log( 'handleTouchMoveDolly' );\n\n            var dx = event.touches[0].pageX - event.touches[1].pageX\n            var dy = event.touches[0].pageY - event.touches[1].pageY\n\n            var distance = Math.sqrt(dx * dx + dy * dy)\n\n            dollyEnd.set(0, distance)\n\n            dollyDelta.subVectors(dollyEnd, dollyStart)\n\n            if (dollyDelta.y > 0) {\n                dollyOut(getZoomScale())\n            } else if (dollyDelta.y < 0) {\n                dollyIn(getZoomScale())\n            }\n\n            dollyStart.copy(dollyEnd)\n\n            scope.update()\n        }\n\n        function handleTouchMovePan(event) {\n            // console.log( 'handleTouchMovePan' );\n\n            panEnd.set(event.touches[0].pageX, event.touches[0].pageY)\n\n            panDelta.subVectors(panEnd, panStart)\n\n            pan(panDelta.x, panDelta.y)\n\n            panStart.copy(panEnd)\n\n            scope.update()\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onMouseDown(event) {\n            if (scope.enabled === false) return\n\n            event.preventDefault()\n\n            if (event.button === scope.mouseButtons.ORBIT) {\n                if (scope.enableRotate === false) return\n\n                handleMouseDownRotate(event)\n\n                state = STATE.ROTATE\n            } else if (event.button === scope.mouseButtons.ZOOM) {\n                if (scope.enableZoom === false) return\n\n                handleMouseDownDolly(event)\n\n                state = STATE.DOLLY\n            } else if (event.button === scope.mouseButtons.PAN) {\n                if (scope.enablePan === false) return\n\n                handleMouseDownPan(event)\n\n                state = STATE.PAN\n            }\n\n            if (state !== STATE.NONE) {\n                document.addEventListener('mousemove', onMouseMove, false)\n                document.addEventListener('mouseup', onMouseUp, false)\n\n                scope.dispatchEvent(startEvent)\n            }\n        }\n\n        function onMouseMove(event) {\n            if (scope.enabled === false) return\n\n            event.preventDefault()\n\n            if (state === STATE.ROTATE) {\n                if (scope.enableRotate === false) return\n\n                handleMouseMoveRotate(event)\n            } else if (state === STATE.DOLLY) {\n                if (scope.enableZoom === false) return\n\n                handleMouseMoveDolly(event)\n            } else if (state === STATE.PAN) {\n                if (scope.enablePan === false) return\n\n                handleMouseMovePan(event)\n            }\n        }\n\n        function onMouseUp(event) {\n            if (scope.enabled === false) return\n\n            document.removeEventListener('mousemove', onMouseMove, false)\n            document.removeEventListener('mouseup', onMouseUp, false)\n\n            scope.dispatchEvent(endEvent)\n\n            state = STATE.NONE\n        }\n\n        function onMouseWheel(event) {\n            if (scope.enabled === false || scope.enableZoom === false || (state !== STATE.NONE && state !== STATE.ROTATE)) return\n\n            event.preventDefault()\n            event.stopPropagation()\n\n            handleMouseWheel(event)\n\n            scope.dispatchEvent(startEvent) // not sure why these are here...\n            scope.dispatchEvent(endEvent)\n        }\n\n        function onKeyDown(event) {\n            if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return\n\n            handleKeyDown(event)\n        }\n\n        function onTouchStart(event) {\n            if (scope.enabled === false) return\n\n            switch (event.touches.length) {\n                case 3: // one-fingered touch: rotate\n\n                    if (scope.enableRotate === false) return\n\n                    handleTouchStartRotate(event)\n\n                    state = STATE.TOUCH_ROTATE\n\n                    break\n\n                case 2: // two-fingered touch: dolly\n\n                    if (scope.enableZoom === false) return\n\n                    handleTouchStartDolly(event)\n\n                    state = STATE.TOUCH_DOLLY\n\n                    break\n\n                case 1: // three-fingered touch: pan\n\n                    if (scope.enablePan === false) return\n\n                    handleTouchStartPan(event)\n\n                    state = STATE.TOUCH_PAN\n\n                    break\n\n                default:\n\n                    state = STATE.NONE\n            }\n\n            if (state !== STATE.NONE) {\n                scope.dispatchEvent(startEvent)\n            }\n        }\n\n        function onTouchMove(event) {\n            if (scope.enabled === false) return\n\n            event.preventDefault()\n            event.stopPropagation()\n\n            switch (event.touches.length) {\n                case 3: // one-fingered touch: rotate\n\n                    if (scope.enableRotate === false) return\n                    if (state !== STATE.TOUCH_ROTATE) return // is this needed?...\n\n                    handleTouchMoveRotate(event)\n\n                    break\n\n                case 2: // two-fingered touch: dolly\n\n                    if (scope.enableZoom === false) return\n                    if (state !== STATE.TOUCH_DOLLY) return // is this needed?...\n\n                    handleTouchMoveDolly(event)\n\n                    break\n\n                case 1: // three-fingered touch: pan\n\n                    if (scope.enablePan === false) return\n                    if (state !== STATE.TOUCH_PAN) return // is this needed?...\n\n                    handleTouchMovePan(event)\n\n                    break\n\n                default:\n\n                    state = STATE.NONE\n            }\n        }\n\n        function onTouchEnd(event) {\n            if (scope.enabled === false) return\n\n            scope.dispatchEvent(endEvent)\n\n            state = STATE.NONE\n        }\n\n        function onContextMenu(event) {\n            event.preventDefault()\n        }\n\n        //\n\n        scope.domElement.addEventListener('contextmenu', onContextMenu, false)\n\n        scope.domElement.addEventListener('mousedown', onMouseDown, false)\n        scope.domElement.addEventListener('wheel', onMouseWheel, false)\n\n        scope.domElement.addEventListener('touchstart', onTouchStart, false)\n        scope.domElement.addEventListener('touchend', onTouchEnd, false)\n        scope.domElement.addEventListener('touchmove', onTouchMove, false)\n\n        window.addEventListener('keydown', onKeyDown, false)\n\n        // force an update at start\n\n        this.update()\n    };\n\n    get center() {\n        console.warn('OrbitControls: .center has been renamed to .target')\n        return this.target\n    }\n\n    // backward compatibility\n\n    get noZoom() {\n        console.warn('OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.')\n        return !this.enableZoom\n    }\n\n    set noZoom(value) {\n        console.warn('OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.')\n        this.enableZoom = !value\n    }\n\n    get noRotate() {\n        console.warn('OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.')\n        return !this.enableRotate\n    }\n\n    set noRotate(value) {\n        console.warn('OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.')\n        this.enableRotate = !value\n    }\n\n    get noPan() {\n        console.warn('OrbitControls: .noPan has been deprecated. Use .enablePan instead.')\n        return !this.enablePan\n    }\n\n    set noPan(value) {\n        console.warn('OrbitControls: .noPan has been deprecated. Use .enablePan instead.')\n        this.enablePan = !value\n    }\n\n    get noKeys() {\n        console.warn('OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.')\n        return !this.enableKeys\n    }\n\n    set noKeys(value) {\n        console.warn('OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.')\n        this.enableKeys = !value\n    }\n\n    get staticMoving() {\n        console.warn('OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.')\n        return !this.enableDamping\n    }\n\n    set staticMoving(value) {\n        console.warn('OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.')\n        this.enableDamping = !value\n    }\n\n    get dynamicDampingFactor() {\n        console.warn('OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.')\n        return this.dampingFactor\n    }\n\n    set dynamicDampingFactor(value) {\n        console.warn('OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.')\n        this.dampingFactor = value\n    }\n}\n\nexport default OrbitControls\n","export default __webpack_public_path__ + \"static/media/Background.9e682f80.jpg\";","import {RepeatWrapping, TextureLoader} from 'three'\n\n\nimport backgroundImage from '../assets/jpg/Background.jpg'\n\nexport const textureTypes = {\n    background: 'background',\n}\n\nexport function getTexture (textureType) {\n    const textureLoader = new TextureLoader()\n\n    switch (textureType) {\n        case textureTypes.background:\n            return textureLoader.load(backgroundImage, function (texture) {\n                texture.wrapS = texture.wrapT = RepeatWrapping\n                texture.offset.set(0, 0)\n                texture.repeat.set(75, 75)\n            })\n        default:\n            return\n    }\n}\n","export const materialTypes = {\n    // Drawing\n    background: 'background',\n    placeholder: 'placeholder',\n    departmentLocked: 'departmentLocked',\n\n    cafeteriaMarker: 'cafeteriaMarker',\n    customMarker: 'customMarker',\n    entranceMarker: 'entranceMarker',\n    staircaseMarker: 'staircaseMarker',\n    toiletMarker: 'toiletMarker',\n\n    openSpacePattern: 'openSpacePattern',\n    roomsPattern: 'roomsPattern',\n    infrastructurePattern: 'infrastructurePattern',\n    blockedPattern: 'blockedPattern',\n\n    openSpaceIcon: 'openSpaceIcon',\n    roomsIcon: 'roomsIcon',\n    infrastructureIcon: 'infrastructureIcon',\n    blockedIcon: 'blockedIcon',\n\n    // Floorplan\n    default: 'default',\n    defaultShadow: 'defaultShadow',\n    defaultLine: 'defaultLine',\n\n    selectionArea: 'selectionArea',\n\n    green: 'green',\n    cyan: 'cyan',\n    blue: 'blue',\n    pink: 'pink',\n    black: 'black',\n    turquoise: 'turquoise',\n    grey: 'grey',\n    white: 'white',\n    orange: 'orange',\n    transparent: 'transparent',\n\n    scalePatternLow: 'scalePatternLow',\n    scalePatternHigh: 'scalePatternHigh',\n}","import {MeshBasicMaterial} from 'three'\nimport {getTexture, textureTypes} from './Textures'\nimport {materialTypes} from './MaterialTypes'\n\nconst materialColors = {\n    default: '#ff00ff',\n    defaultShadow: '#ffffff',\n    defaultLine: '#000000',\n\n    green: '#1aae19',\n    cyan: '#08eafc',\n    blue: '#003fff',\n    pink: '#ff00ff',\n    black: '#000000',\n    orange: '#ff7500',\n    turquoise: '#a9ecea',\n    grey: '#666666',\n    white: '#ffffff',\n\n    selectionArea: '#b0b0b0',\n}\n\nconst materials = {\n    background: new MeshBasicMaterial({map: getTexture(textureTypes.background)}),\n    transparent: new MeshBasicMaterial({name: materialTypes.transparent, visible: false}),\n    selectionArea: new MeshBasicMaterial({\n        name: materialTypes.selectionArea,\n        color: materialColors.selectionArea,\n        transparent: true,\n        opacity: .3\n    }),\n    pink: new MeshBasicMaterial({name: materialTypes.pink, color: materialColors.pink}),\n    white: new MeshBasicMaterial({name: materialTypes.white, color: materialColors.white}),\n    black: new MeshBasicMaterial({name: materialTypes.black, color: materialColors.black}),\n    green: new MeshBasicMaterial({name: materialTypes.green, color: materialColors.green}),\n    cyan: new MeshBasicMaterial({name: materialTypes.cyan, color: materialColors.cyan}),\n    blue: new MeshBasicMaterial({name: materialTypes.blue, color: materialTypes.blue}),\n    orange: new MeshBasicMaterial({name: materialTypes.orange, color: materialColors.orange}),\n    default: new MeshBasicMaterial({\n        name: materialTypes.default,\n        color: materialColors.default,\n        visible: true,\n        depthWrite: true\n    })\n}\n\nexport function getMaterial (materialType) {\n    return materials[materialType]\n}\n","import {Raycaster, Scene, Vector3} from 'three'\nimport {getRenderer, resize} from './Renderer'\nimport {getOrthographicCamera} from './Camera'\nimport {start, stop} from './RenderLoop'\nimport {getOrbitControls} from './OrbitControls'\nimport {addBackground} from './Background'\nimport {addCatchPlane} from './CatchPlane'\n\nexport function setUp(mount) {\n    const scene = new Scene()\n\n    const renderer = getRenderer()\n    mount.current.appendChild(renderer.domElement)\n\n    const camera = getOrthographicCamera(mount.current)\n    scene.add(camera)\n\n    const raycaster = new Raycaster(new Vector3(0, 0, 20), new Vector3(0, 0, -1), 0, 100)\n\n    const orbitControls = getOrbitControls(camera, renderer)\n\n    addBackground(scene)\n    addCatchPlane(scene)\n\n    resize(mount, renderer, camera)\n    const frameId = start(renderer, scene, camera)\n\n    return {\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        frameId: frameId,\n        raycaster: raycaster,\n        orbitControls: orbitControls,\n    }\n}\n\nexport function cleanUp(currentMount, renderer, frameId) {\n    stop(frameId.frameId)\n    currentMount.removeChild(renderer.domElement)\n}","import {OrthographicCamera} from 'three'\n\n\nexport function getOrthographicCamera(mount) {\n    const {clientWidth, clientHeight} = mount\n\n    const camera = new OrthographicCamera(\n        clientWidth / -16,\n        clientWidth /16,\n        clientHeight / 16,\n        clientHeight / -16,\n        -1,\n        100\n    )\n\n    camera.enableRotate = false\n    camera.position.z = 20\n\n    return camera\n}","import {Mesh, PlaneBufferGeometry} from 'three'\nimport {getMaterial} from './Materials'\nimport {materialTypes} from './MaterialTypes'\n\nexport function addBackground(scene) {\n    const geometry = new PlaneBufferGeometry(2000, 2000)\n    const material = getMaterial(materialTypes.background)\n\n    const mesh = new Mesh(geometry, material)\n    mesh.name = 'background'\n    mesh.position.set(0, 0, -1)\n\n    scene.add(mesh)\n}","import {Mesh, PlaneBufferGeometry} from 'three'\nimport {getMaterial} from './Materials'\nimport {materialTypes} from './MaterialTypes'\n\nexport function addCatchPlane(scene) {\n    const geometry = new PlaneBufferGeometry(2000, 2000)\n    const material = getMaterial(materialTypes.transparent)\n\n    const mesh = new Mesh(geometry, material)\n    mesh.name = 'catchPlane'\n    mesh.position.set(0, 0, -.9)\n\n    scene.add(mesh)\n}","const mouseEvent = {\n    mouseDown: 'mousedown',\n    mouseMouse: 'mousemove',\n    mouseUp: 'mouseup',\n}\n\nexport function addMouseEvents(element, onMouseDown, onMouseMove, onMouseUp) {\n    if (onMouseDown) {\n        element.addEventListener(mouseEvent.mouseDown, onMouseDown, true)\n    }\n    if (onMouseMove) {\n        element.addEventListener(mouseEvent.mouseMouse, onMouseMove, true)\n    }\n    if (onMouseUp) {\n        element.addEventListener(mouseEvent.mouseUp, onMouseUp, true)\n    }\n}\n\nexport function removeMouseEvents(element, onMouseDown, onMouseMove, onMouseUp) {\n    if (onMouseDown) {\n        element.removeEventListener(mouseEvent.mouseDown, onMouseDown, true)\n    }\n    if (onMouseMove) {\n        element.removeEventListener(mouseEvent.mouseMouse, onMouseMove, true)\n    }\n    if (onMouseUp) {\n        element.removeEventListener(mouseEvent.mouseUp, onMouseUp, true)\n    }\n}","const keyEvents = {\n    keyDown: 'keydown',\n    keyUp: 'keyup',\n}\n\nexport function addKeyEvents(onKeyDown, onKeyUp) {\n    if (onKeyDown) {\n        document.addEventListener(keyEvents.keyDown, onKeyDown, true)\n    }\n    if (onKeyUp) {\n        document.addEventListener(keyEvents.keyUp, onKeyUp, true)\n    }\n}\n\nexport function removeKeyEvents(onKeyDown, onKeyUp) {\n    if (onKeyDown) {\n        document.removeEventListener(keyEvents.keyDown, onKeyDown, true)\n    }\n    if (onKeyUp) {\n        document.removeEventListener(keyEvents.keyUp, onKeyUp, true)\n    }\n}\n\nexport const keyCodes = {\n    digit1: 'Digit1',\n    digit2: 'Digit2',\n    digit3: 'Digit3',\n    digit4: 'Digit4',\n    digit5: 'Digit5',\n    digit6: 'Digit6',\n    digit7: 'Digit7',\n    digit8: 'Digit8',\n    digit9: 'Digit9',\n    digit0: 'Digit0',\n\n    backspace: 'Backspace',\n    escape: 'Escape',\n    enter: 'Enter',\n    space: 'Space',\n    altLeft: 'AltLeft',\n    altRight: 'AltRight',\n    controlLeft: 'ControlLeft',\n    metaLeft: 'MetaLeft',\n\n    arrowLeft: 'ArrowLeft',\n    arrowRight: 'ArrowRight',\n    arrowUp: 'ArrowUp',\n    arrowDown: 'ArrowDown',\n\n    f12: 'F12',\n\n    keyA: 'KeyA',\n    keyD: 'KeyD',\n    keyF: 'KeyF',\n    keyI: 'KeyI',\n    keyL: 'KeyL',\n    keyS: 'KeyS',\n    keyY: 'KeyY',\n    keyZ: 'KeyZ',\n}","export const representationTypes = {\n    select: 'select',\n    outline: 'outline',\n    wall: 'wall',\n    door: 'door',\n    window: 'window',\n    graph: 'graph',\n\n    magicGuideLine: 'magicGuideLine',\n}\n","\nexport const controllerActions = {\n    onLeftMouseDown: 'onLeftMouseDown',\n    onLeftMouseDoubleClick: 'onLeftMouseDoubleClick',\n    onRightMouseDown: 'onRightMouseDown',\n    onRightMouseDoubleClick: 'onRightMouseDoubleClick',\n    onRightMouseUp: 'onRightMouseUp',\n    onLeftMouseUp: 'onLeftMouseUp',\n    onMouseMove: 'onMouseMove',\n\n    onBackspaceDown: 'onBackspaceDown',\n    onEnterDown: 'onEnterDown',\n    onEscapeDown: 'onEscapeDown',\n\n    onArrowLeftDown: 'onArrowLeftDown',\n    onArrowRightDown: 'onArrowRightDown',\n    onArrowUpDown: 'onArrowUpDown',\n    onArrowDownDown: 'onArrowDownDown',\n\n    onKeyADown: 'onKeyADown',\n}\n\n\nexport class GeometryController {\n\n    constructor(floorPlanerController, representationType, group) {\n        this.floorPlanerController = floorPlanerController\n        this.representationType = representationType\n        this.group = group\n    }\n\n    removeGeometryFromGroup(geometry, currentGeometries) {\n        geometry.dispose()\n        if (this.group)\n            this.group.remove(geometry)\n        this.removeGeometryFromCurrentGeometries(geometry, currentGeometries)\n    }\n\n    removeGeometryFromCurrentGeometries(geometry, currentGeometries) {\n        if (currentGeometries.includes(geometry)) {\n            const index = currentGeometries.findIndex(geo => geo.uuid === geometry.uuid)\n            currentGeometries.splice(index, 1)\n        }\n    }\n\n}","export const geometryTypes = {\n    vertexGroup: 'vertexGroup',\n    vertex: 'vertex',\n    edgeGroup: 'edgeGroup',\n    edge: 'edge',\n    face: 'face',\n    geometry: 'geometry',\n    polygon: 'polygon',\n    polyline: 'polyline',\n    stamp: 'stamp',\n    offsetFace: 'offsetFace',\n}","import {materialTypes} from '../common/MaterialTypes'\nimport {getMaterial} from '../common/Materials'\n\nexport const outlineConfig = {\n    vertex: {\n        innerActiveMaterial: getMaterial(materialTypes.orange),\n        innerInactiveMaterial: getMaterial(materialTypes.transparent),\n        outerActiveMaterial: getMaterial(materialTypes.orange),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.1,\n        outerSize: 0.3,\n        innerSegments: 32,\n        outerSegments: 32,\n    },\n    edge: {\n        innerActiveMaterial: getMaterial(materialTypes.orange),\n        innerInactiveMaterial: getMaterial(materialTypes.transparent),\n        outerActiveMaterial: getMaterial(materialTypes.transparent),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.1,\n        outerSize: 0.3,\n    },\n    properties: {\n        offsetLeft: .2,\n        offsetRight: .2,\n    }\n}","import {CircleBufferGeometry, Mesh} from 'three'\n\nimport {representationTypes} from '../config/RepresentationTypes'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {materialTypes} from '../common/MaterialTypes'\n\nimport {getMaterial} from '../common/Materials'\nimport {outlineConfig} from '../config/OutlineConfig'\n\n\nconst vertexGeometryStore = new Map()\n\nexport function getVertexGeometryFromStore(size, segments = 32) {\n    const radius = (size / 2).toFixed(2)\n\n    if (vertexGeometryStore.has(radius))\n        return vertexGeometryStore.get(radius)\n\n    const geometry = new CircleBufferGeometry(radius, segments)\n    vertexGeometryStore.set(radius, geometry)\n    return geometry\n}\n\nexport class Vertex extends Mesh {\n\n    callbacks = []\n\n    constructor(scale, representationType = null, properties) {\n        scale = scale ? scale : 1\n\n        const config = getVertexConfigByRepresentationType(representationType)\n\n        const innerGeometry = getVertexGeometryFromStore(config.innerSize * scale, config.innerSegments)\n        const outerGeometry = getVertexGeometryFromStore(config.outerSize * scale, config.outerSegments)\n\n        super(outerGeometry, config.outerInactiveMaterial)\n\n        const innerMesh = new Mesh(innerGeometry, config.innerInactiveMaterial)\n        innerMesh.name = 'innerVertex'\n        innerMesh.position.z -= 0.001\n\n        this.add(innerMesh)\n\n        if (properties)\n            this.position.set(properties.x, properties.y)\n\n        this.geometryType = geometryTypes.vertex\n        this.config = config\n        this.name = 'outerVertex'\n        this.edges = []\n    }\n\n    addEdge(edge) {\n        if (!this.edges.includes(edge))\n            this.edges.push(edge)\n    }\n\n    removeEdge(edge) {\n        const edgeIndex = this.edges.indexOf(edge)\n        this.edges.splice(edgeIndex, 1)\n    }\n\n    getEdges() {\n        return this.edges\n    }\n\n    updateScale(scale) {\n        this.scale.set(scale, scale)\n    }\n\n    moveDelta(movement) {\n        this.position.x += movement.x\n        this.position.y += movement.y\n    }\n\n    setActive(active) {\n        this.material = active ? this.config.outerActiveMaterial : this.config.outerInactiveMaterial\n        this.children[0].material = active ? this.config.innerActiveMaterial : this.config.innerInactiveMaterial\n    }\n\n    getGeometry() {\n        let currentGeometry = this\n\n        while (currentGeometry.parent) {\n            if (currentGeometry.rootGeometry) {\n                return currentGeometry\n            }\n            currentGeometry = currentGeometry.parent\n        }\n\n        return null\n    }\n\n    dispose() {\n        this.callbacks.forEach(callback => callback())\n    }\n\n    subscribe(callback) {\n        if (!this.callbacks.includes(callback))\n            this.callbacks.push(callback)\n    }\n\n    unsubscribe(callback) {\n        this.callbacks = this.callbacks.filter(c => c !== callback)\n    }\n}\n\nexport function getVertexConfigByRepresentationType(representationType) {\n    switch (representationType) {\n        case representationTypes.outline:\n            return outlineConfig.vertex\n        default:\n            return {\n                innerActiveMaterial: getMaterial(materialTypes.blue),\n                innerInactiveMaterial: getMaterial(materialTypes.transparent),\n                outerActiveMaterial: getMaterial(materialTypes.blue),\n                outerInactiveMaterial: getMaterial(materialTypes.transparent),\n                innerSize: 0.1,\n                outerSize: 0.3,\n                innerSegments: 32,\n                outerSegments: 32,\n            }\n    }\n}","import {materialTypes} from '../common/MaterialTypes'\n\nimport {getMaterial} from '../common/Materials'\n\nexport const graphConfig = {\n    vertex: {\n        innerActiveMaterial: getMaterial(materialTypes.pink),\n        innerInactiveMaterial: getMaterial(materialTypes.transparent),\n        outerActiveMaterial: getMaterial(materialTypes.pink),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.1,\n        outerSize: 0.3,\n        innerSegments: 32,\n        outerSegments: 32,\n    },\n    edge: {\n        innerActiveMaterial: getMaterial(materialTypes.pink),\n        innerInactiveMaterial: getMaterial(materialTypes.pink),\n        outerActiveMaterial: getMaterial(materialTypes.transparent),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.1,\n        outerSize: 0.3,\n    },\n}","import {materialTypes} from '../common/MaterialTypes'\n\nimport {getMaterial} from '../common/Materials'\n\nexport const wallConfig = {\n    vertex: {\n        innerActiveMaterial: getMaterial(materialTypes.blue),\n        innerInactiveMaterial: getMaterial(materialTypes.transparent),\n        outerActiveMaterial: getMaterial(materialTypes.blue),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.1,\n        outerSize: 0.3,\n        innerSegments: 32,\n        outerSegments: 32,\n    },\n    edge: {\n        innerActiveMaterial: getMaterial(materialTypes.blue),\n        innerInactiveMaterial: getMaterial(materialTypes.transparent),\n        outerActiveMaterial: getMaterial(materialTypes.transparent),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.1,\n        outerSize: 0.3,\n    },\n    properties: {\n        offsetLeft: .0,\n        offsetRight: .2,\n    },\n}","import {getMaterial} from '../common/Materials'\nimport {materialTypes} from '../common/MaterialTypes'\n\nexport const defaultConfig = {\n    vertex: {\n        innerActiveMaterial: getMaterial(materialTypes.blue),\n        innerInactiveMaterial: getMaterial(materialTypes.transparent),\n        outerActiveMaterial: getMaterial(materialTypes.blue),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.1,\n        outerSize: 0.3,\n        innerSegments: 32,\n        outerSegments: 32,\n    },\n    edge: {\n        innerActiveMaterial: getMaterial(materialTypes.orange),\n        innerInactiveMaterial: getMaterial(materialTypes.orange),\n        outerActiveMaterial: getMaterial(materialTypes.transparent),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.1,\n        outerSize: 0.3,\n    },\n    properties: {}\n}","import {materialTypes} from '../common/MaterialTypes'\nimport {getMaterial} from '../common/Materials'\n\nexport const magicGuideLineConfig = {\n    edge: {\n        innerActiveMaterial: getMaterial(materialTypes.transparent),\n        innerInactiveMaterial: getMaterial(materialTypes.transparent),\n        outerActiveMaterial: getMaterial(materialTypes.pink),\n        outerInactiveMaterial: getMaterial(materialTypes.transparent),\n        innerSize: 0.05,\n        outerSize: 0.05,\n    }\n}","import {MathUtils, Mesh, PlaneBufferGeometry, Vector2} from 'three'\nimport {representationTypes} from '../config/RepresentationTypes'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {graphConfig} from '../config/GraphConfig'\nimport {outlineConfig} from '../config/OutlineConfig'\nimport {wallConfig} from '../config/WallConfig'\nimport {defaultConfig} from '../config/DefaultConfig'\nimport {magicGuideLineConfig} from '../config/MagicGuideLineConfig'\n\nconst edgeGeometryStore = new Map()\n\nfunction getEdgeGeometry(innerSize, outerSize) {\n    let innerGeometry\n\n    if (edgeGeometryStore.has(innerSize)) {\n        innerGeometry = edgeGeometryStore.get(innerSize)\n    } else {\n        innerGeometry = new PlaneBufferGeometry(innerSize, 1)\n        edgeGeometryStore.set(innerSize, innerGeometry)\n    }\n\n    let outerGeometry\n\n    if (edgeGeometryStore.has(outerSize)) {\n        outerGeometry = edgeGeometryStore.get(outerSize)\n    } else {\n        outerGeometry = new PlaneBufferGeometry(outerSize, 1)\n        edgeGeometryStore.set(outerSize, outerGeometry)\n    }\n\n    return {innerGeometry: innerGeometry, outerGeometry: outerGeometry}\n}\n\nexport class Edge extends Mesh {\n\n    vertices = []\n    callbacks = []\n\n    constructor(startVertex, endVertex, scale, representationType, uuid = null) {\n        scale = scale ? scale : 1\n        const config = getEdgeConfigByRepresentationType(representationType)\n\n        //TODO: Use plane geometry and rotate than using tubeGeometry\n        const {innerGeometry, outerGeometry} = getEdgeGeometry(config.innerSize, config.outerSize)\n\n        super(outerGeometry, config.outerInactiveMaterial)\n\n        const innerMesh = new Mesh(innerGeometry, config.innerInactiveMaterial)\n        innerMesh.name = 'innerEdge'\n        innerMesh.position.z -= 0.001\n\n        this.update(startVertex.position, endVertex.position)\n\n        this.add(innerMesh)\n\n        this.uuid = uuid ? uuid : this.uuid\n\n        startVertex.addEdge(this)\n        endVertex.addEdge(this)\n\n        this.scale.x = scale\n        this.geometryType = geometryTypes.edge\n        this.config = config\n        this.vertices = [startVertex, endVertex]\n        this.name = 'outerEdge'\n\n    }\n\n    update(startPosition, endPosition) {\n        const startV2 = new Vector2(startPosition.x, startPosition.y)\n        const endV2 = new Vector2(endPosition.x, endPosition.y)\n\n        const direction = endV2.clone().sub(startV2)\n\n        const length = startV2.distanceTo(endV2)\n\n        const center = startV2.clone().addScaledVector(direction, .5)\n\n        this.position.set(center.x, center.y)\n        this.scale.y = length\n\n        const angle = direction.angle()\n        this.rotation.z = 0\n        this.rotateZ(angle + Math.PI / 2)\n\n        this.callbacks.forEach(callback => callback(this))\n    }\n\n    updateEdgeCallback() {\n        this.callbacks.forEach(callback => callback(this))\n    }\n\n    setActive(active) {\n        this.material = active ? this.config.outerActiveMaterial : this.config.outerInactiveMaterial\n        this.children[0].material = active ? this.config.innerActiveMaterial : this.config.innerInactiveMaterial\n    }\n\n    updateScale(scale) {\n        this.scale.x = scale\n    }\n\n    getVertices() {\n        return this.vertices\n    }\n\n    getAngle() {\n        if (!this.parent || this.parent.geometryType !== geometryTypes.edgeGroup) {\n            return 0\n        }\n\n        const vertices = this.vertices\n\n        if (vertices.length !== 2) {\n            return 0\n        }\n\n        const direction = vertices[0].position.clone().sub(vertices[1].position)\n\n        return new Vector2(direction.x, direction.y).angle()\n    }\n\n    getLength() {\n        const vertices = this.vertices\n\n        if (vertices.length !== 2)\n            return\n\n        return vertices[0].position.distanceTo(vertices[1].position)\n    }\n\n    getNearestPositionOnEdge(position, noteOffset = true) {\n        if (!this.parent || !this.parent['findVerticesByUuids']) {\n            return position\n        }\n\n        const vertices = this.vertices\n\n        if (vertices.length !== 2) {\n            return position\n        }\n\n        const {x: startX, y: startY} = vertices[0].position\n        const {x: endX, y: endY} = vertices[1].position\n\n        const ap = new Vector2(position.x - startX, position.y - startY)\n        const ab = new Vector2(endX - startX, endY - startY)\n\n        const length = ab.length()\n\n        let distance = ap.dot(ab) / length\n\n        if (distance > 0 && distance > length)\n            distance = length\n        else if (distance < 0 && distance < length)\n            distance = 0\n\n        ab.normalize()\n\n        let point = new Vector2(startX + ab.x * distance, startY + ab.y * distance)\n\n        if (noteOffset && this.parent.parent && this.parent.parent['getOffsets']) {\n            const {offsetLeft, offsetRight} = this.parent.parent.getOffsets()\n\n            let offsetMiddle = this.parent.parent['isClockwise'] ? (offsetRight - offsetLeft) / 2 : (offsetLeft - offsetRight) / 2\n\n            point = ab.multiplyScalar(offsetMiddle).add(point).rotateAround(point, MathUtils.degToRad(90))\n        }\n\n        return point\n    }\n\n    getDistanceToEdge(position) {\n        if (!this.parent || !this.parent['findVerticesByUuids']) {\n            return Number.MAX_VALUE\n        }\n\n        return this.getNearestPositionOnEdge(position, false).distanceTo(position)\n    }\n\n    getDirectionFromVertex(startVertex) {\n        const vertices = this.vertices\n\n        if (vertices.length !== 2)\n            return new Vector2()\n\n        const endVertex = vertices.find(vertex => vertex !== startVertex)\n\n        return new Vector2(endVertex.position.x - startVertex.position.x,\n            endVertex.position.y - startVertex.position.y)\n    }\n\n    isConnectToVertex(vertex) {\n        return this.getVertices().includes(vertex)\n    }\n\n    getGeometry() {\n        let currentGeometry = this\n\n        while (currentGeometry.parent) {\n            if (currentGeometry.rootGeometry) {\n                return currentGeometry\n            }\n            currentGeometry = currentGeometry.parent\n        }\n\n        return null\n    }\n\n    dispose() {\n        this.callbacks.forEach(callback => callback())\n    }\n\n    subscribe(callback) {\n        if (!this.callbacks.includes(callback))\n            this.callbacks.push(callback)\n    }\n\n    unsubscribe(callback) {\n        this.callbacks = this.callbacks.filter(c => c !== callback)\n    }\n\n}\n\nfunction getEdgeConfigByRepresentationType(representationType) {\n    switch (representationType) {\n        case representationTypes.outline:\n            return outlineConfig.edge\n        case representationTypes.magicGuideLine:\n            return magicGuideLineConfig.edge\n        case representationTypes.wall:\n            return wallConfig.edge\n        case representationTypes.graph:\n            return graphConfig.edge\n        default:\n            return defaultConfig.edge\n    }\n}","import {Group} from 'three'\nimport {Vertex} from '../geometries/VertexFactory'\nimport {Edge} from '../geometries/EdgeFactory'\n\nlet magicGuideLine = null\n\nconst orientationTypes = {\n    vertical: 'vertical',\n    horizontal: 'horizontal',\n    verHor: 'verHor',\n}\n\nexport class MagicGuideLine extends Group {\n\n    constructor(scene) {\n        super()\n\n        this.representationType = 'magicGuideLine'\n\n        const startVertexVertical = new Vertex(1, this.representationType, {x: 100000, y: 0, z: 0})\n        const endVertexVertical = new Vertex(1, this.representationType, {x: -100000, y: 0, z: 0})\n        this.vertical = new Edge(startVertexVertical, endVertexVertical, 1, this.representationType)\n        this.vertical.name = 'verticalMagicGuideLine'\n        this.vertical.setActive(false)\n        this.add(this.vertical)\n\n        const startVertexHorizontal = new Vertex(1, this.representationType, {x: 0, y: 100000, z: 0})\n        const endVertexHorizontal = new Vertex(1, this.representationType, {x: 0, y: -100000, z: 0})\n        this.horizontal = new Edge(startVertexHorizontal, endVertexHorizontal, 1, this.representationType)\n        this.horizontal.name = 'horizontalMagicGuideLine'\n        this.horizontal.setActive(false)\n        this.add(this.horizontal)\n\n        scene.add(this)\n\n        this.name = 'magicGuideLines'\n\n        magicGuideLine = this\n    }\n\n    updateVertical(position) {\n        this.vertical.update({x: position.x, y: 100000, z: 0}, {x: position.x, y: -100000, z: 0})\n        this.vertical.setActive(true)\n    }\n\n    updateHorizontal(position) {\n        this.horizontal.update({x: 100000, y: position.y, z: 0}, {x: -100000, y: position.y, z: 0})\n        this.horizontal.setActive(true)\n    }\n\n    setOrientation(orientationType, position) {\n\n        switch (orientationType) {\n            case orientationTypes.vertical:\n                this.updateVertical(position)\n                this.horizontal.setActive(false)\n                break\n            case orientationTypes.horizontal:\n                this.vertical.setActive(false)\n                this.updateHorizontal(position)\n                break\n            case orientationTypes.verHor:\n                this.updateVertical(position)\n                this.updateHorizontal(position)\n                break\n            default:\n                this.vertical.setActive(false)\n                this.horizontal.setActive(false)\n                break\n        }\n    }\n\n    updateScale(scale) {\n        this.vertical.updateScale(scale)\n        this.horizontal.updateScale(scale)\n    }\n}\n\nexport function getSnappingPosition(event, position, otherPositions, autoSnap = false, snapDistance = 0.5) {\n    if (autoSnap && (event.ctrlKey || event.metaKey)) {\n        return position\n    } else if (autoSnap || (event.ctrlKey || event.metaKey)) {\n        return getNearestVerticesValuesAsPosition(position, otherPositions, snapDistance)\n    } else {\n        return position\n    }\n}\n\nfunction getNearestVerticesValuesAsPosition(position, otherPositions, snapDistance) {\n    let nearestVerticalDistance = Number.MAX_VALUE\n    let nearestVerticalPosition = null\n    let nearestHorizontalDistance = Number.MAX_VALUE\n    let nearestHorizontalPosition = null\n    let orientation = null\n\n    otherPositions\n        .forEach(otherPosition => {\n            const verticalDistance = Math.abs(position.x - otherPosition.x)\n            if (verticalDistance < nearestVerticalDistance) {\n                nearestVerticalDistance = verticalDistance\n                nearestVerticalPosition = otherPosition\n            }\n\n            const horizontalDistance = Math.abs(position.y - otherPosition.y)\n            if (horizontalDistance < nearestHorizontalDistance) {\n                nearestHorizontalDistance = horizontalDistance\n                nearestHorizontalPosition = otherPosition\n            }\n        })\n\n    if (nearestHorizontalPosition && nearestHorizontalDistance < snapDistance &&\n        Math.abs(nearestHorizontalPosition.y - position.y) < snapDistance) {\n        position.y = nearestHorizontalPosition.y\n        orientation = orientationTypes.horizontal\n    }\n\n    if (nearestVerticalPosition && nearestVerticalDistance < snapDistance &&\n        Math.abs(nearestVerticalPosition.x - position.x) < snapDistance) {\n        position.x = nearestVerticalPosition.x\n        orientation = orientation ? orientationTypes.verHor : orientationTypes.vertical\n    }\n\n    if (magicGuideLine) {\n        magicGuideLine.setOrientation(orientation, position)\n    }\n\n    return position\n}","import {getVertexConfigByRepresentationType, Vertex} from '../geometries/VertexFactory'\nimport {representationTypes} from '../config/RepresentationTypes'\n\nlet previewVertex = null\n\nconst previewRepresentationTypes = [representationTypes.outline, representationTypes.wall, representationTypes.graph]\n\nexport class PreviewVertex extends Vertex {\n\n    constructor(scene) {\n        super()\n\n        scene.add(this)\n\n        this.name = 'previewVertex'\n        this.position.z = 0.02\n\n        previewVertex = this\n    }\n\n    setRepresentationType(representationType) {\n        this.config = getVertexConfigByRepresentationType(representationType)\n    }\n}\n\nexport function setPreviewVertexActive(position, representationType) {\n    if (!previewRepresentationTypes.includes(representationType)) {\n        previewVertex.setActive(false)\n        return\n    }\n\n    previewVertex.position.set(position.x, position.y)\n    previewVertex.setRepresentationType(representationType)\n    previewVertex.setActive(true)\n}\n","export function insertChildIntoParent (parent, child, index) {\n    const children = parent.children\n\n    parent.children = []\n\n    children.splice(index, 0, child)\n\n    children.forEach(child => parent.add(child))\n\n    return parent\n}\n\nexport function removeAllChildrenFromParent(parent) {\n    for (let i = parent.children.length - 1; i >= 0; i--) {\n        parent.remove(parent.children[i])\n    }\n}\n\nexport function addAllChildrenToOtherGroup(group, otherGroup) {\n    for (let i = group.children.length - 1; i >= 0; i--) {\n        const v = group.children[i]\n\n        otherGroup.add(v)\n        group.remove(v)\n    }\n}","import {Group} from 'three'\nimport {Vertex} from './VertexFactory'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {insertChildIntoParent} from '../helper/GroupHelper'\n\nexport class VertexGroup extends Group {\n\n    constructor(parent) {\n        super()\n\n        this.name = 'vertexGroup'\n        this.currentScale = 1\n        this.geometryType = geometryTypes.vertexGroup\n\n        this.position.z = 0.03\n\n        parent.add(this)\n    }\n\n    setEdgeGroup(edgeGroup) {\n        this.edgeGroup = edgeGroup\n    }\n\n    addVertex(position) {\n        const vertex = new Vertex(this.currentScale, this.getRepresentationType(), position)\n        vertex.setActive(true)\n        this.add(vertex)\n\n        return vertex\n    }\n\n    addVertexAtIndex(position, index) {\n        const vertex = new Vertex(this.currentScale, this.getRepresentationType(), position)\n        insertChildIntoParent(this, vertex, index)\n        return vertex\n    }\n\n    updateVertex(vertex, position) {\n        vertex.position.set(position.x, position.y)\n\n        vertex.getEdges().forEach(edge => {\n            this.edgeGroup.updateEdge(edge)\n        })\n    }\n\n    moveDeltaAllVertices(movement) {\n        this.children.forEach(vertex => vertex.moveDelta(movement))\n        if (this.edgeGroup) {\n            this.edgeGroup.updateAllEdges()\n            return true\n        }\n\n        return false\n    }\n\n    removeVertex(vertex) {\n        vertex.getEdges()\n            .forEach(edge =>\n                this.edgeGroup.removeEdge(edge)\n            )\n\n        this.remove(vertex)\n    }\n\n    findVertexByUuid(uuid) {\n        return this.children.find(child => child.uuid === uuid)\n    }\n\n    findVerticesByUuids(uuids) {\n        const vertices = []\n        uuids.forEach(uuid => vertices.push(this.children.find(vertex => vertex.uuid === uuid)))\n        return vertices\n    }\n\n    getVertexByIndex(index) {\n        return this.children.length ? this.children[(index + this.children.length) % this.children.length] : null\n    }\n\n    getPositionFromVertex(uuid) {\n        const vertex = this.findVertexByUuid(uuid)\n        return vertex ? vertex.position : vertex\n    }\n\n    getPositions() {\n        return this.getVertices().map(vertex => vertex.position)\n    }\n\n    getRepresentationType() {\n        if (this.parent && this.parent.representationType)\n            return this.parent.representationType\n    }\n\n    updateScale(scale) {\n        this.children.forEach(vertex => vertex.updateScale(scale))\n\n        this.currentScale = scale\n    }\n\n    setActive(active) {\n        this.children.forEach(vertex => vertex.setActive(active))\n    }\n\n    setVertexOrder(vertex, index) {\n        index = (index + this.children.length) % this.children.length\n        index = index > this.children.length ? this.children.length - 1 : index\n        this.remove(vertex)\n        const children = this.children\n\n        this.children = []\n\n        children.splice(index, 0, vertex)\n\n        children.forEach(child => this.add(child))\n    }\n\n    getCount() {\n        return this.children.length\n    }\n\n    getVertices() {\n        const multipleEdgesFromVertex = this.children.filter(vertex => vertex.getEdges().length > 2)\n\n        // Return unordered\n        if (multipleEdgesFromVertex.length || !this.edgeGroup || !this.edgeGroup.children.length) {\n            return this.children\n        }\n\n        // Order vertices after the connected edges\n        const vertices = []\n        let startEdge = this.children.find(vertex => vertex.getEdges().length === 1)\n        startEdge = startEdge ? startEdge.getEdges()[0] : this.edgeGroup.children[0]\n        const startVertices = startEdge.getVertices()\n        vertices.push(startVertices[0])\n        vertices.push(startVertices[1])\n        let currentVertex = startVertices[1]\n        let breakWhile = false\n\n        while (vertices.length !== this.children.length && !breakWhile) {\n            const nextEdge = this.edgeGroup.children.find(edge =>\n                edge.getVertices().includes(currentVertex) &&\n                ((!vertices.includes(edge.getVertices()[0]) && vertices.includes(edge.getVertices()[1])) ||\n                    (vertices.includes(edge.getVertices()[0]) && !vertices.includes(edge.getVertices()[1]))))\n\n            if (nextEdge) {\n                currentVertex = nextEdge.getVertices().find(vertex => vertex !== currentVertex)\n                vertices.push(currentVertex)\n            } else {\n                breakWhile = true\n            }\n        }\n\n        return vertices\n    }\n\n    dispose() {\n        this.children.forEach(vertex => vertex.dispose())\n    }\n\n    fromJSON(verticesJSON) {\n        verticesJSON.forEach(json => {\n            const vertex = new Vertex(this.currentScale, this.getRepresentationType(), json)\n            vertex.uuid = json.uuid\n            this.add(vertex)\n        })\n    }\n\n    toJSON() {\n        const json = []\n\n        this.children.forEach(vertex => {\n            const {x, y, z} = vertex.position\n\n            json.push({\n                uuid: vertex.uuid,\n                x: x,\n                y: y,\n                z: z\n            })\n        })\n\n        return json\n    }\n}","import {Group} from 'three'\nimport {Edge} from './EdgeFactory'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {insertChildIntoParent} from '../helper/GroupHelper'\n\nexport class EdgeGroup extends Group {\n\n    constructor(parent, vertexGroup) {\n        super()\n\n        this.name = 'edgeGroup'\n        this.currentScale = 1\n        this.geometryType = geometryTypes.edgeGroup\n\n        this.position.z = 0.02\n\n        this.vertexGroup = vertexGroup\n\n        parent.add(this)\n    }\n\n    addEdge(startVertex, endVertex) {\n        const newEdge = new Edge(startVertex, endVertex, this.currentScale, this.getRepresentationType())\n        newEdge.setActive(true)\n        this.add(newEdge)\n    }\n\n    addEdgeAtIndex(startVertex, endVertex, index) {\n        const newEdge = new Edge(startVertex, endVertex, this.currentScale, this.getRepresentationType())\n        newEdge.setActive(true)\n\n        insertChildIntoParent(this, newEdge, index)\n    }\n\n    addVertexToEdge(edge, position) {\n        const neighborVertices = edge.getVertices()\n\n        if (neighborVertices.length !== 2)\n            return\n\n        const newVertex = this.vertexGroup.addVertex(position)\n        newVertex.setActive(true)\n\n        const previousEdge = new Edge(neighborVertices[0], newVertex, this.currentScale, this.getRepresentationType())\n        previousEdge.setActive(true)\n        this.add(previousEdge)\n        const nextEdge = new Edge(newVertex, neighborVertices[1], this.currentScale, this.getRepresentationType())\n        nextEdge.setActive(true)\n        this.add(nextEdge)\n\n        this.removeEdge(edge)\n        return newVertex\n\n        // OLD system without saved edge order\n        /*\n        const previousVertexIndex = this.vertexGroup.children.indexOf(neighborVertices[0])\n        const nextVertexIndex = this.vertexGroup.children.indexOf(neighborVertices[1])\n        let newVertex\n\n        if (previousVertexIndex === 0 && nextVertexIndex === this.vertexGroup.children.length - 1) {\n            newVertex = this.vertexGroup.addVertex(position)\n\n            let newEdge = new Edge(neighborVertices[1], newVertex, this.currentScale, this.getRepresentationType())\n            newEdge.setActive(true)\n            this.add(newEdge)\n            newEdge = new Edge(newVertex, neighborVertices[0], this.currentScale, this.getRepresentationType())\n            newEdge.setActive(true)\n            this.add(newEdge)\n        } else {\n            newVertex = this.vertexGroup.addVertexAtIndex(position, nextVertexIndex)\n            const deleteEdgeIndex = this.children.indexOf(edge)\n\n            this.addEdgeAtIndex(neighborVertices[0], newVertex, deleteEdgeIndex)\n            this.addEdgeAtIndex(newVertex, neighborVertices[1], deleteEdgeIndex + 1)\n        }\n\n        newVertex.setActive(true)\n        this.removeEdge(edge)\n\n        return newVertex\n\n         */\n    }\n\n    removeEdge(edge) {\n        edge.getVertices().forEach(vertex => {\n            vertex.removeEdge(edge)\n        })\n\n        edge.dispose()\n\n        this.remove(edge)\n    }\n\n    removeEdges(edges) {\n        edges.forEach(edge => this.removeEdge(edge))\n    }\n\n    updateEdge(edge) {\n        const vertices = edge.getVertices()\n\n        if (vertices.length !== 2)\n            return\n\n        edge.update(vertices[0].position, vertices[1].position)\n    }\n\n    getRepresentationType() {\n        if (this.parent && this.parent.representationType)\n            return this.parent.representationType\n    }\n\n    updateAllEdges() {\n        this.children.forEach(edge => this.updateEdge(edge))\n    }\n\n    updateAllEdgesCallbacks() {\n        this.children.forEach(edge => edge.updateEdgeCallback())\n    }\n\n    updateScale(scale) {\n        this.children.forEach(edge => edge.updateScale(scale))\n\n        this.currentScale = scale\n    }\n\n    setActive(active) {\n        this.children.forEach(edge => edge.setActive(active))\n    }\n\n    getNearestEdgeToPosition(position) {\n        let currentDistance = Number.MAX_VALUE\n        let nearestEdge = null\n\n        this.children.forEach(edge => {\n            const distance = edge.getDistanceToEdge(position)\n            if (distance < currentDistance) {\n                currentDistance = distance\n                nearestEdge = edge\n            }\n        })\n\n        return nearestEdge\n    }\n\n    findEdgeByUuid(uuid) {\n        return this.children.find(edge => edge.uuid === uuid)\n    }\n\n    findVerticesByUuids(verticesUuids) {\n        return this.vertexGroup.findVerticesByUuids(verticesUuids)\n    }\n\n    getEdges() {\n        return this.children.flat()\n    }\n\n    getEdgeByIndex(index) {\n        return this.children.length ? this.children[(index + this.children.length) % this.children.length] : null\n    }\n\n    dispose() {\n        this.children.forEach(edge => edge.dispose())\n    }\n\n    fromJSON(edgesJSON) {\n        edgesJSON.forEach(json => {\n            const startVertex = this.vertexGroup.findVertexByUuid(json.startVertex)\n            const endVertex = this.vertexGroup.findVertexByUuid(json.endVertex)\n\n            const edge = new Edge(startVertex, endVertex, this.currentScale, this.getRepresentationType(), json.uuid)\n\n            this.add(edge)\n        })\n    }\n\n    toJSON() {\n        const json = []\n\n        this.children.forEach(edge => {\n            const vertices = edge.getVertices()\n\n            json.push({\n                uuid: edge.uuid,\n                startVertex: vertices[0].uuid,\n                endVertex: vertices[1].uuid,\n            })\n        })\n\n        return json\n    }\n}","import {Group} from 'three'\nimport {VertexGroup} from './VertexGroup'\nimport {EdgeGroup} from './EdgeGroup'\nimport {geometryTypes} from '../config/GeometryTypes'\n\nconst defaultActions = {\n    idle: 'idle',\n    select: 'select',\n}\n\nexport class Geometry extends Group {\n\n    constructor(parent, representationType, geometryActions = {}) {\n        super()\n\n        this.representationType = representationType\n\n        this.vertexGroup = new VertexGroup(this)\n        this.edgeGroup = new EdgeGroup(this, this.vertexGroup)\n        this.vertexGroup.setEdgeGroup(this.edgeGroup)\n\n        this.currentScale = 1\n        this.active = false\n        this.geometryType = geometryTypes.geometry\n        this.rootGeometry = true\n\n        this.actions = Object.assign(defaultActions, geometryActions)\n\n        //Add Geometry to parent\n        parent.add(this)\n    }\n\n    updateScale(scale) {\n        this.vertexGroup.updateScale(scale)\n        this.edgeGroup.updateScale(scale)\n\n        this.currentScale = scale\n    }\n\n    setAction(currentAction) {\n        this.currentAction = currentAction\n    }\n\n    getAction() {\n        return this.currentAction\n    }\n\n    setActive(active) {\n        this.active = active\n        this.vertexGroup.setActive(active)\n        if (this.edgeGroup) {\n            this.edgeGroup.setActive(active)\n        }\n\n        this.setAction(active ? this.actions.select : this.actions.idle)\n    }\n\n    isActive() {\n        return this.active\n    }\n\n    getVertices() {\n        return this.vertexGroup.getVertices()\n    }\n\n    getVerticesPositions() {\n        return this.vertexGroup.children.map(vertex => vertex.position)\n    }\n\n    getEdges() {\n        return this.edgeGroup.getEdges()\n    }\n\n    dispose() {\n        this.vertexGroup.dispose()\n        this.edgeGroup.dispose()\n    }\n\n    toJSON() {\n\n        const geometryJSON = {\n            uuid: this.uuid,\n            geometryType: this.geometryType,\n            representationType: this.representationType,\n            isValidate: false,\n            errors: [],\n            properties: this.properties,\n        }\n\n        const vertices = this.vertexGroup.toJSON()\n        if (vertices.length) {\n            geometryJSON.vertices = vertices\n        }\n\n        const edges = this.edgeGroup.toJSON()\n        if (edges.length) {\n            geometryJSON.edges = edges\n        }\n\n        return geometryJSON\n    }\n\n    fromJSON(json) {\n        this.uuid = json.uuid\n        this.geometryType = json.geometryType\n        this.representationType = json.representationType\n        this.properties = json.properties\n\n        if (json.vertices) {\n            this.vertexGroup.fromJSON(json.vertices)\n        }\n        if (json.edges) {\n            this.edgeGroup.fromJSON(json.edges)\n        }\n\n    }\n\n}\n","import {Mesh, Path, Shape, ShapeBufferGeometry} from 'three'\nimport {representationTypes} from '../config/RepresentationTypes'\nimport {getMaterial} from '../common/Materials'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {materialTypes} from '../common/MaterialTypes'\n\nexport function createFaceBufferGeometry(vertices, holes = []) {\n    const face = new Shape()\n\n    if (!vertices || !vertices.length)\n        return\n\n    face.moveTo(vertices[0].x, vertices[0].y)\n\n    for (let i = 1; i < vertices.length; i++) {\n        face.lineTo(vertices[i].x, vertices[i].y)\n    }\n\n    if (holes && holes.length) {\n        holes.forEach(hole => {\n            const holePath = new Path()\n\n            holePath.moveTo(hole[0].x, hole[0].y)\n\n            for (let i = 1; i < hole.length; i++) {\n                holePath.lineTo(hole[i].x, hole[i].y)\n            }\n\n            face.holes.push(holePath)\n        })\n    }\n\n    return new ShapeBufferGeometry(face)\n}\n\nexport class Face extends Mesh {\n\n    //TODO: Implement holes\n    constructor(representationType, vertices, holes = []) {\n        const config = getFaceConfigByRepresentationType(representationType)\n\n        const faceGeometry = createFaceBufferGeometry(vertices, holes)\n\n        super(faceGeometry, config.inactiveMaterial)\n\n        this.position.z = 0.01\n\n        this.geometryType = geometryTypes.face\n        this.config = config\n    }\n\n    setActive(active) {\n        this.material = active ? this.config.activeMaterial : this.config.inactiveMaterial\n    }\n\n    update(vertices, holes = []) {\n        this.dispose()\n        this.geometry = createFaceBufferGeometry(vertices, holes)\n    }\n\n    moveDelta(movement) {\n        if (movement.lengthSq() === 0)\n            return\n\n        this.position.x += movement.x\n        this.position.y += movement.y\n    }\n\n    dispose() {\n        this.geometry.dispose()\n    }\n\n}\n\nexport function getFaceConfigByRepresentationType(representationType) {\n    switch (representationType) {\n        case representationTypes.outline:\n            return {\n                activeMaterial: getMaterial(materialTypes.transparent),\n                inactiveMaterial: getMaterial(materialTypes.transparent),\n            }\n        case representationTypes.door:\n            return {\n                activeMaterial: getMaterial(materialTypes.pink),\n                inactiveMaterial: getMaterial(materialTypes.green),\n            }\n        case representationTypes.window:\n            return {\n                activeMaterial: getMaterial(materialTypes.cyan),\n                inactiveMaterial: getMaterial(materialTypes.transparent),\n            }\n        default:\n            return {\n                activeMaterial: getMaterial(materialTypes.pink),\n                inactiveMaterial: getMaterial(materialTypes.transparent),\n            }\n    }\n}\n\nexport const doorDecoGeometry = createDoorDecoGeometry()\n\nfunction createDoorDecoGeometry() {\n    const face = new Shape()\n\n    face.moveTo(-.4, -.1)\n    face.lineTo(-.4, -.8)\n    face.absarc(-.4, -.1, .8, -Math.PI / 2, 0, false)\n    face.absarc(-.4, -.1, .78, 0, 354 / 360 * (-Math.PI / 2), true)\n    face.lineTo(-.38, -.1)\n\n    return new ShapeBufferGeometry(face)\n}\n\n/*\nfunction createDoubleDoorDecoGeometry() {\n    const face = new Shape()\n\n    face.moveTo(0, -.1)\n    face.absarc(.4, -.1, .4, Math.PI, -Math.PI / 2, false)\n    face.lineTo(.4, -.1)\n\n    const face2 = new Shape()\n\n    face2.moveTo(-.4, -.1)\n    face2.lineTo(-.4, -.4)\n    face2.absarc(-.4, -.1, .4, -Math.PI / 2, 0, false)\n\n    return new ShapeBufferGeometry(face)\n}*/","export function isPolygonClockwise(vertices) {\n    let result = 0\n\n    for (let i = 0; i < vertices.length - 1; i++) {\n        result += getResult(vertices[i], vertices[i + 1])\n    }\n\n    result += getResult(vertices[vertices.length - 1], vertices[0])\n\n    return result >= 0\n}\n\nfunction getResult(startVertex, endVertex) {\n    return (endVertex.x - startVertex.x) * (endVertex.y + startVertex.y)\n}\n\nexport function getVerticesByWidthAndHeight(width, height) {\n    const vertices = []\n\n    vertices.push({x: -width / 2, y: height / 2})\n    vertices.push({x: width / 2, y: height / 2})\n    vertices.push({x: width / 2, y: -height / 2})\n    vertices.push({x: -width / 2, y: -height / 2})\n\n    return vertices\n}\n\nexport function isRectangleContainsVertex(leftTop, rightBottom, vertex) {\n    return leftTop.x <= vertex.x && vertex.x <= rightBottom.x &&\n        rightBottom.y <= vertex.y && vertex.y <= leftTop.y\n}\n\nexport function isLinesIntersecting(line_0, line_1) {\n    const x1 = line_0.startVertex.x\n    const y1 = line_0.startVertex.y\n    const x2 = line_0.endVertex.x\n    const y2 = line_0.endVertex.y\n\n    const x3 = line_1.startVertex.x\n    const y3 = line_1.startVertex.y\n    const x4 = line_1.endVertex.x\n    const y4 = line_1.endVertex.y\n\n    const uA = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1))\n    const uB = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1))\n\n    return 0 <= uA && uA <= 1 && 0 <= uB && uB <= 1\n}","import {Geometry} from './Geometry'\nimport {representationTypes} from '../config/RepresentationTypes'\nimport {doorDecoGeometry, Face,} from './FaceFactory'\nimport {Mesh} from 'three'\nimport {getMaterial} from '../common/Materials'\nimport {getVerticesByWidthAndHeight} from '../helper/GeometryHelper'\nimport {materialTypes} from '../common/MaterialTypes'\n\nexport const stampActions = {\n    drag: 'drag',\n}\n\nexport class StampGeometry extends Geometry {\n\n    constructor(group, representationType, geometryActions = {}) {\n        super(group, representationType, Object.assign(stampActions, geometryActions))\n\n        this.config = getStampConfigByRepresentationType(representationType)\n\n        this.setActive(true)\n        this.setAction(this.actions.idle)\n    }\n\n    updateStamp(representationType, position, angle) {\n        const vertices = getVerticesByWidthAndHeight(this.config.width, this.config.depth)\n\n        this.face = new Face(representationType, vertices)\n        this.face.rotation.z = 0\n        this.face.position.z = 0.03\n        this.face.setActive(true)\n        this.add(this.face)\n\n        if (this.config.deco && this.config.deco.length) {\n            this.setDecorationMeshes(this.config.deco)\n        }\n\n        if (angle) {\n            this.face.rotateZ(angle)\n        }\n\n        if (position) {\n            this.position.set(position.x, position.y)\n        }\n\n        this.representationType = representationType\n    }\n\n    setDecorationMeshes(decorations) {\n        decorations.forEach(deco => {\n            const {geometry, material} = deco\n            const mesh = new Mesh(geometry, material)\n\n            this.face.add(mesh)\n        })\n    }\n\n    moveDelta(movement) {\n        if (movement.lengthSq() === 0)\n            return\n\n        this.face.moveDelta(movement)\n    }\n\n    setActive(active) {\n        if (this.face) {\n            this.face.setActive(active)\n\n            this.face.children.forEach(deco => deco.visible = active)\n        }\n        this.setAction(active ? this.actions.select : this.actions.idle)\n    }\n\n\n}\n\nexport function getStampConfigByRepresentationType(representationType) {\n    switch (representationType) {\n        case representationTypes.door:\n            return {\n                width: 0.9,\n                depth: 0.2,\n                deco: [{\n                    geometry: doorDecoGeometry,\n                    material: getMaterial(materialTypes.black),\n                }],\n            }\n        case representationTypes.window:\n            return {\n                width: 0.9,\n                depth: 0.2,\n            }\n        default:\n            return {\n                width: 0.9,\n                depth: 0.2,\n            }\n\n    }\n}","import {removeAllChildrenFromParent} from './GroupHelper'\nimport {getStampConfigByRepresentationType, StampGeometry} from '../geometries/StampGeometry'\n\nlet previewStamp = null\n\n\nexport class PreviewStamp extends StampGeometry {\n\n    constructor(scene) {\n        super(scene)\n        const config = getStampConfigByRepresentationType()\n\n        this.name = 'previewStamp'\n        this.config = config\n\n        previewStamp = this\n    }\n\n    updateScale(scale) {\n        this.scale.y = scale\n    }\n\n    updateStamp(representationType, position, angle) {\n        if (this.face) {\n            removeAllChildrenFromParent(this.face)\n            this.face.dispose()\n            this.remove(this.face)\n        }\n\n        super.updateStamp(representationType, position, angle)\n    }\n\n    updateDepth(depth) {\n        if (this.config.depth !== depth) {\n            this.config.depth = depth\n            this.updateStamp(this.representationType)\n        }\n    }\n\n    updatePosition(position) {\n        this.position.set(position.x, position.y)\n    }\n\n    updateRotation(angle) {\n        if (this.face) {\n            this.face.rotation.z = 0\n            this.face.rotateZ(angle)\n        }\n    }\n\n\n}\n\nexport function setPreviewStampActive(position, representationType, angle = null, depth) {\n    if (![].includes(representationType)) {\n        previewStamp.setActive(false)\n        return\n    }\n\n    previewStamp.setActive(true)\n\n    if (previewStamp.representationType !== representationType) {\n        previewStamp.updateStamp(representationType, position, angle)\n    } else if (previewStamp) {\n        previewStamp.updateDepth(depth)\n        previewStamp.updatePosition(position)\n        previewStamp.updateRotation(angle)\n    }\n}\n","import {StampGeometry} from './StampGeometry'\nimport {getVerticesByWidthAndHeight} from '../helper/GeometryHelper'\nimport {createFaceBufferGeometry, Face} from './FaceFactory'\nimport {representationTypes} from '../config/RepresentationTypes'\nimport {geometryTypes} from '../config/GeometryTypes'\n\nconst referenceEdgeActions = {\n    resize: 'resize',\n}\n\n\nexport class ReferenceEdgeGeometry extends StampGeometry {\n\n    referenceEdge\n    referenceVertex\n\n    constructor(group, representationType) {\n        super(group, representationType, referenceEdgeActions)\n\n        this.geometryType = geometryTypes.stamp\n\n        this.properties = {\n            width: 1,\n        }\n    }\n\n    setReferenceEdge(referenceEdge) {\n        if (this.referenceEdge) {\n            this.referenceEdge.unsubscribe(this.updateEdgeCallback)\n        }\n        this.referenceEdge = referenceEdge\n        if (this.referenceEdge) {\n            this.referenceEdge.subscribe(this.updateEdgeCallback)\n        }\n\n        this.properties.referenceEdge = this.referenceEdge ? this.referenceEdge.uuid : this.referenceEdge\n\n        if (this.referenceEdge && (!this.referenceVertex || !this.referenceEdge.isConnectToVertex(this.referenceVertex))) {\n            const vertices = this.referenceEdge.getVertices()\n\n            this.setReferenceVertex(vertices[0])\n        }\n    }\n\n    setReferenceVertex(referenceVertex) {\n        this.referenceVertex = referenceVertex\n        this.properties.referenceVertex = this.referenceVertex ? this.referenceVertex.uuid : this.referenceVertex\n    }\n\n    updateReferenceEdge(referenceEdge, position) {\n        this.setReferenceEdge(referenceEdge)\n\n        if (referenceEdge) {\n            this.properties.absolute = position.distanceTo(this.referenceVertex.position)\n            this.properties.relative = this.properties.absolute / this.referenceEdge.getLength()\n            this.updateGeometry()\n        } else {\n            this.updateGeometry(position)\n        }\n    }\n\n    addWidth(width) {\n        this.properties.width = this.properties.width + width > 0.5 ? this.properties.width + width : .5\n        this.properties.width = this.properties.width < this.referenceEdge.getLength() ? this.properties.width : this.referenceEdge.getLength()\n\n        this.updateGeometry()\n    }\n\n    move(movement) {\n        if (this.properties.relative) {\n            let absolute = (this.properties.relative * this.referenceEdge.getLength()) + movement\n            absolute = absolute > 0 ? absolute : 0\n            absolute = absolute < this.referenceEdge.getLength() ? absolute : this.referenceEdge.getLength()\n            this.properties.relative = absolute / this.referenceEdge.getLength()\n        } else if (this.properties.absolute) {\n            this.properties.absolute += movement\n            this.properties.absolute = this.properties.absolute > 0 ? this.properties.absolute : 0\n            this.properties.absolute = this.properties.absolute < this.referenceEdge.getLength() ? this.properties.absolute : this.referenceEdge.getLength()\n        }\n\n        this.updateGeometry()\n    }\n\n    setActive(active) {\n        if (this.face) {\n            this.face.setActive(active)\n        }\n\n        this.setAction(active ? this.actions.select : this.actions.idle)\n    }\n\n    updateEdgeCallback = (edge) => {\n        if (!edge) {\n            this.tryReconnectToParentGeometry()\n        } else if (edge === this.referenceEdge) {\n            if (this.referenceEdge && this.referenceVertex)\n                this.updateGeometry()\n        }\n    }\n\n    tryReconnectToParentGeometry() {\n        let minDistance = Number.MAX_VALUE\n        let nearestEdge = null\n\n        this.referenceEdge.parent.children\n            .filter(edge => edge !== this.referenceEdge)\n            .forEach(edge => {\n                const distance = edge.getDistanceToEdge(this.position)\n                if (distance < minDistance) {\n                    minDistance = distance\n                    nearestEdge = edge\n                }\n            })\n\n        if (nearestEdge && minDistance < 1) {\n            this.setReferenceEdge(nearestEdge)\n            this.updateReferenceEdge(nearestEdge, this.position)\n        } else {\n            this.parent.remove(this)\n        }\n    }\n\n    dispose() {\n        super.dispose()\n\n        if (this.face) {\n            this.face.geometry.dispose()\n        }\n\n        if (this.referenceEdge) {\n            this.referenceEdge.unsubscribe(this.updateEdgeCallback)\n        }\n    }\n\n    fromJSON(json) {\n        super.fromJSON(json)\n\n        this.updateGeometry()\n    }\n\n    updateGeometry(position = null) {\n        let depth = this.properties.depth\n        let angle = 0\n\n        if (this.referenceEdge && this.referenceVertex) {\n            const direction = this.referenceEdge.getDirectionFromVertex(this.referenceVertex)\n\n            if (this.properties.absolute) {\n                direction.normalize().multiplyScalar(this.properties.absolute)\n            } else {\n                direction.multiplyScalar(this.properties.relative ? this.properties.relative : 0.5)\n            }\n            position = this.referenceVertex.position.clone().add(direction)\n            position = this.referenceEdge.getNearestPositionOnEdge(position)\n\n            angle = this.referenceEdge.getAngle()\n            depth = this.referenceEdge.getGeometry().getOffset()\n        }\n\n        const vertices = getVerticesByWidthAndHeight(this.properties.width, depth)\n\n        if (this.face) {\n            this.face.geometry.dispose()\n            this.face.geometry = createFaceBufferGeometry(vertices)\n        } else {\n            this.face = new Face(this.representationType, vertices)\n            this.add(this.face)\n        }\n\n        this.face.rotation.z = 0\n        this.face.rotateZ(angle)\n\n        if (position)\n            this.position.set(position.x, position.y)\n    }\n\n}\n\nexport function getReferenceEdgePropertiesByRepresentationType(representationType) {\n    switch (representationType) {\n        case representationTypes.door:\n            return {\n                width: .9,\n                depth: .2,\n            }\n        case representationTypes.window:\n            return {\n                width: 1,\n                depth: .2,\n            }\n        default:\n            return {\n                width: 1,\n                depth: .2,\n            }\n    }\n}","import {\n    getReferenceEdgePropertiesByRepresentationType,\n    ReferenceEdgeGeometry\n} from '../geometries/ReferenceEdgeGeometry'\nimport {representationTypes} from '../config/RepresentationTypes'\n\nlet previewReferenceEdge = null\n\nconst previewRepresentationTypes = [representationTypes.door, representationTypes.window]\n\nexport class PreviewReferenceEdge extends ReferenceEdgeGeometry {\n    constructor(scene) {\n        super(scene)\n\n        previewReferenceEdge = this\n\n        const properties = getReferenceEdgePropertiesByRepresentationType(representationTypes.door)\n\n        this.properties = {\n            width: properties.width,\n            depth: properties.depth,\n        }\n    }\n\n}\n\nexport function setPreviewReferenceEdgeActive(position, representationType, edge) {\n    if (!previewRepresentationTypes.includes(representationType)) {\n        previewReferenceEdge.setActive(false)\n        return\n    }\n\n    previewReferenceEdge.setActive(true)\n\n    previewReferenceEdge.updateReferenceEdge(edge, position)\n}\n","import {Mesh, Vector3} from 'three'\nimport {createFaceBufferGeometry} from './FaceFactory'\nimport {getMaterial} from '../common/Materials'\nimport {isRectangleContainsVertex} from '../helper/GeometryHelper'\nimport {materialTypes} from '../common/MaterialTypes'\n\n\nexport class SelectionArea extends Mesh {\n\n    startPosition\n    vertices = []\n    minDraggedDistance = .2\n\n    constructor(scene) {\n        super()\n\n        scene.add(this)\n        this.material = getMaterial(materialTypes.selectionArea)\n        this.visible = false\n    }\n\n    isActive() {\n        return this.visible\n    }\n\n    setActive(active) {\n        this.visible = active\n    }\n\n    setStartPosition(position) {\n        this.startPosition = position\n        this.setActive(true)\n        this.updateArea(position)\n    }\n\n    updateArea(position) {\n        const bottom = position.y > this.startPosition.y ? this.startPosition.y : position.y\n        const top = position.y > this.startPosition.y ? position.y : this.startPosition.y\n        const left = position.x > this.startPosition.x ? this.startPosition.x : position.x\n        const right = position.x > this.startPosition.x ? position.x : this.startPosition.x\n\n        this.vertices = [\n            new Vector3(left, top, 0),\n            new Vector3(right, top, 0),\n            new Vector3(right, bottom, 0),\n            new Vector3(left, bottom, 0),\n        ]\n\n        if (this.geometry) {\n            this.geometry.dispose()\n        }\n        this.geometry = createFaceBufferGeometry(this.vertices)\n    }\n\n    getContainsVertices(vertices) {\n        return this.vertices.length === 4 ?\n            vertices.filter(vertex => isRectangleContainsVertex(this.vertices[0], this.vertices[2], vertex.position))\n            : []\n    }\n\n    isDragged() {\n        return this.vertices.length === 4 ? this.vertices[0].distanceTo(this.vertices[2]) > this.minDraggedDistance : false\n    }\n\n}","import {SelectionArea} from '../geometries/SelectionArea'\n\nexport class SelectController {\n\n    selectionArea\n    draggedSelectionArea = false\n\n    constructor(floorPlanerController, selectableRepresentationTypes = []) {\n        this.floorPlanerController = floorPlanerController\n        this.selectableRepresentationTypes = selectableRepresentationTypes\n        this.selectionArea = new SelectionArea(floorPlanerController.scene)\n    }\n\n    onLeftMouseDown() {\n        const currentPosition = this.floorPlanerController.getCurrentPosition()\n\n        this.selectionArea.setStartPosition(currentPosition)\n\n        this.draggedSelectionArea = false\n    }\n\n    onMouseMove(event, currentGeometries) {\n        if (!this.selectionArea.isActive()) {\n            return\n        }\n\n        this.unselectGeometriesByStartDraggingSelectionArea(currentGeometries)\n\n        const currentPosition = this.floorPlanerController.getCurrentPosition()\n\n        this.selectionArea.updateArea(currentPosition)\n\n        this.floorPlanerController.getGeometries()\n            .forEach(geometry => {\n                    this.removeGeometryFromCurrentGeometries(geometry, currentGeometries)\n                    geometry.setActive(false)\n                }\n            )\n\n        let geometriesToSelect = []\n        this.selectionArea.getContainsVertices(this.floorPlanerController.getAllVertices())\n            .forEach(vertex => {\n                const geometry = vertex.getGeometry()\n                if (!geometriesToSelect.includes(geometry))\n                    geometriesToSelect.push(geometry)\n            })\n\n        const geometriesToUnselect = currentGeometries.filter(geometry => geometriesToSelect.includes(geometry))\n        geometriesToSelect = geometriesToSelect.filter(geometry => !currentGeometries.includes(geometry))\n\n        geometriesToSelect.forEach(geometry => {\n            geometry.setActive(true)\n            currentGeometries.push(geometry)\n        })\n        geometriesToUnselect.forEach(geometry => {\n            this.removeGeometryFromCurrentGeometries(geometry, currentGeometries)\n        })\n    }\n\n    unselectGeometriesByStartDraggingSelectionArea(currentGeometries) {\n        if (!this.draggedSelectionArea && !this.selectionArea.isDragged()) {\n            for (let i = currentGeometries.length - 1; i >= 0; i--) {\n                this.removeGeometryFromCurrentGeometries(currentGeometries[i], currentGeometries)\n            }\n            this.draggedSelectionArea = true\n        }\n    }\n\n    onLeftMouseUp(event, currentGeometries) {\n        if (this.selectionArea.isActive()) {\n            this.selectionArea.setActive(false)\n            if (this.selectionArea.isDragged()) {\n                return\n            }\n        }\n\n        const geometries = this.floorPlanerController.getRaycastHitObjectsByRepresentationTypes(this.selectableRepresentationTypes)\n        let geometry = geometries.length ? geometries[0] : null\n\n        if (!!currentGeometries.length && !!geometry && (event.ctrlKey || event.metaKey)) {\n            if (!geometry.isActive()) {\n                geometry.setActive(true)\n                currentGeometries.push(geometry)\n            } else {\n                geometry.setActive(false)\n                const index = currentGeometries.findIndex(geo => geo === geometry)\n                currentGeometries.splice(index, 1)\n            }\n        } else if (!!currentGeometries.length && !!geometry && !(event.ctrlKey || event.metaKey)) {\n            if (currentGeometries.length === 1) {\n                const index = geometries.findIndex(geo => geo === currentGeometries[0])\n                if (index >= 0)\n                    geometry = geometries[(index + 1) % geometries.length]\n            }\n            currentGeometries.forEach(geo => geo.setActive(false))\n            currentGeometries.splice(0, currentGeometries.length)\n\n            geometry.setActive(true)\n            currentGeometries.push(geometry)\n        }\n        // Select only one\n        else if (!currentGeometries.length && !!geometry) {\n            geometry.setActive(true)\n            currentGeometries.push(geometry)\n        }\n        // Deselect all\n        else if (!!currentGeometries.length && !geometry) {\n            currentGeometries.forEach(geometry => geometry.setActive(false))\n            currentGeometries.splice(0, currentGeometries.length)\n        }\n    }\n\n    onKeyADown(event, currentGeometries) {\n        if (event.ctrlKey || event.metaKey) {\n            const geometries = this.floorPlanerController.getGeometries()\n\n            geometries.filter(geometry => this.selectableRepresentationTypes.includes(geometry.representationType))\n                .forEach(geometry => {\n                    geometry.setActive(true)\n                    if (!currentGeometries.includes(geometry)) {\n                        currentGeometries.push(geometry)\n                    }\n                })\n\n        }\n    }\n\n    onEscapeDown(event, currentGeometries) {\n        if (this.selectionArea.isActive()) {\n            for (let i = currentGeometries.length; i >= 0; i--) {\n                this.removeGeometryFromCurrentGeometries(currentGeometries[i], currentGeometries)\n            }\n            this.selectionArea.setActive(false)\n        }\n    }\n\n    cancelCurrentActions(currentGeometries) {\n        currentGeometries.filter(geometry => this.selectableRepresentationTypes.includes(geometry.representationType))\n            .forEach(geometry => {\n                geometry.setActive(false)\n            })\n\n        currentGeometries.splice(0, currentGeometries.length)\n    }\n\n    removeGeometryFromCurrentGeometries(geometry, currentGeometries) {\n        if (currentGeometries.includes(geometry)) {\n            geometry.setActive(false)\n            const index = currentGeometries.findIndex(geo => geo === geometry)\n            currentGeometries.splice(index, 1)\n        }\n    }\n}","import {GeometryController} from './GeometryController'\nimport {getSnappingPosition} from '../helper/MagicGuideLine'\nimport {setPreviewVertexActive} from '../helper/PreviewVertex'\nimport {geometryTypes} from '../config/GeometryTypes'\n\nexport class PolyEdgeController extends GeometryController {\n\n    onLeftMouseDownNew(event, geometry, currentGeometries) {\n        const currentPosition = this.getCurrentPosition(event, geometry.draggedVertex ? geometry.draggedVertex.position : null)\n\n        geometry.addVertex(currentPosition)\n        geometry.addVertex(currentPosition)\n\n        geometry.setAction(geometry.actions.addVertex)\n\n        currentGeometries.push(geometry)\n\n        return true\n    }\n\n    onMouseMove(event, geometry, currentGeometries) {\n        const result = this.onMouseMovePreviewVertex(event, geometry, currentGeometries)\n\n        if (result !== undefined)\n            return result\n\n        if (!geometry)\n            return false\n\n        return this.onMouseMoveCurrentGeometry(event, geometry, currentGeometries)\n    }\n\n    onMouseMovePreviewVertex(event, geometry, currentGeometries) {\n        if (!geometry && !currentGeometries.length) {\n            setPreviewVertexActive(this.getCurrentPosition(event), this.representationType)\n            return true\n        } else if (!!currentGeometries.length && geometry && geometry.getAction() === geometry.actions.select) {\n            const raycastHitObject = this.floorPlanerController.getRaycastHitObjectForGeometryByGeometryTypes(geometry, [geometryTypes.vertex, geometryTypes.edge])\n\n            if (raycastHitObject) {\n                switch (raycastHitObject.geometryType) {\n                    case geometryTypes.vertex:\n                        return false\n                    case geometryTypes.edge:\n                        setPreviewVertexActive(this.getCurrentPosition(event), this.representationType)\n                        return true\n                    default:\n                        return false\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    onMouseMoveCurrentGeometry(event, geometry, currentGeometries) {\n        switch (geometry.getAction()) {\n            case geometry.actions.addVertex:\n                if (currentGeometries.length !== 1)\n                    return false\n\n                const lastVertex = geometry.getLastVertex()\n                geometry.updateVertex(this.getCurrentPosition(event, lastVertex.position), lastVertex)\n                return true\n            case geometry.actions.drag:\n                geometry.moveDelta(this.floorPlanerController.getMouseDeltaMovement())\n                return true\n            case geometry.actions.dragVertex:\n                geometry.updateVertex(this.getCurrentPosition(event, geometry.draggedVertex.position))\n                return true\n            default:\n                return false\n        }\n    }\n\n    onLeftMouseDoubleClick(event, geometry, currentGeometries, minVerticesCount) {\n        if (!geometry)\n            return false\n\n        switch (geometry.getAction()) {\n            case geometry.actions.addVertex:\n                if (geometry.getVerticesCount() >= minVerticesCount) {\n                    geometry.close()\n                    this.removeGeometryFromCurrentGeometries(geometry, currentGeometries)\n                    return true\n                }\n                return false\n            default:\n                return false\n        }\n    }\n\n    onLeftMouseUp(event, geometry, currentGeometries) {\n        if (!geometry) {\n            return false\n        }\n\n        switch (geometry.getAction()) {\n            case geometry.actions.drag:\n                geometry.setAction(geometry.actions.select)\n                const result = !!this.startDragPosition && !!this.startDragPosition.distanceToSquared(this.floorPlanerController.getCurrentPosition())\n                this.startDragPosition = null\n                return result\n            case geometry.actions.dragVertex:\n                geometry.setAction(geometry.actions.select)\n                return true\n            default:\n                return false\n        }\n    }\n\n    onBackspaceDown(event, geometry, currentGeometries) {\n        if (!geometry)\n            return false\n\n        switch (geometry.getAction()) {\n            case geometry.actions.addVertex:\n                if (geometry.getVerticesCount() <= 2) {\n                    this.removeGeometryFromGroup(geometry, currentGeometries)\n                } else {\n                    geometry.removeLastVertex()\n                    geometry.updateVertex(this.getCurrentPosition(event, geometry.getLastVertex().position), geometry.getLastVertex())\n                }\n                return true\n            case geometry.actions.select:\n                this.removeGeometryFromGroup(geometry, currentGeometries)\n                return true\n            default:\n                return false\n        }\n    }\n\n    onEscapeDown(event, geometry, currentGeometries) {\n        if (!geometry)\n            return false\n\n        switch (geometry.getAction()) {\n            case geometry.actions.addVertex:\n                this.removeGeometryFromGroup(geometry, currentGeometries)\n                return true\n            case geometry.actions.select:\n                geometry.setActive(false)\n                this.removeGeometryFromCurrentGeometries(geometry, currentGeometries)\n                return true\n            default:\n                return false\n        }\n    }\n\n    onEnterDown(event, geometry, currentGeometries, minVerticesCount = 2) {\n        if (!geometry)\n            return\n\n        switch (geometry.getAction()) {\n            case geometry.actions.addVertex:\n                if (geometry.getVerticesCount() >= minVerticesCount) {\n                    geometry.close()\n                    this.removeGeometryFromCurrentGeometries(geometry, currentGeometries)\n                    return true\n                } else {\n                    return false\n                }\n            default:\n                return false\n        }\n    }\n\n    getCurrentPosition(event, ignoreVertex = null) {\n        const otherPositions = this.floorPlanerController.getAllVerticesPositions().filter(vertex => vertex !== ignoreVertex)\n\n        return getSnappingPosition(event, this.floorPlanerController.getCurrentPosition(), otherPositions)\n    }\n}","export function addVertex(position, geometry) {\n    const {vertexGroup, edgeGroup} = geometry\n    vertexGroup.addVertex(position)\n\n    const vertexCount = vertexGroup.children.length\n\n    if (vertexCount > 1) {\n        const startVertex = vertexGroup.getVertexByIndex(-2)\n        const endVertex = vertexGroup.getVertexByIndex(-1)\n\n        edgeGroup.addEdge(startVertex, endVertex)\n    }\n}\n\nexport function addVertexToEdge(edge, position, geometry) {\n    let {vertexGroup, edgeGroup, face} = geometry\n    geometry.draggedVertex = edgeGroup.addVertexToEdge(edge, position)\n\n    if (face) {\n        face.update(vertexGroup.getPositions())\n    }\n}\n\nexport function updateVertex(position, geometry, vertex = null) {\n    const {vertexGroup, face, draggedVertex} = geometry\n\n    if (!vertex && draggedVertex) {\n        vertex = draggedVertex\n    }\n\n    vertexGroup.updateVertex(vertex, position)\n\n    if (face)\n        face.update(vertexGroup.getPositions())\n}\n\nexport function removeLastVertex(geometry) {\n    const {vertexGroup} = geometry\n\n    const lastVertex = vertexGroup.getVertexByIndex(-1)\n\n    vertexGroup.removeVertex(lastVertex)\n}\n\nexport function moveDelta(movement, geometry) {\n    if (movement.lengthSq() === 0)\n        return\n\n    const {vertexGroup, face} = geometry\n\n    vertexGroup.moveDeltaAllVertices(movement)\n\n    if (face) {\n        face.update(vertexGroup.getPositions())\n    }\n}\n\nexport function getLastVertex(geometry) {\n    const {vertexGroup} = geometry\n\n    return vertexGroup.getVertexByIndex(-1)\n}\n\nexport function getLastEdge(geometry) {\n    const {edgeGroup} = geometry\n\n    return edgeGroup.getEdgeByIndex(-1)\n}\n\nexport function setDraggedVertex(vertex, geometry) {\n    geometry.draggedVertex = vertex\n}\n\nexport function getVerticesCount(geometry) {\n    const {vertexGroup} = geometry\n    return vertexGroup.getCount()\n}\n","import {Geometry} from './Geometry'\nimport {Face} from './FaceFactory'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {\n    addVertex,\n    addVertexToEdge,\n    getLastVertex,\n    getVerticesCount,\n    moveDelta,\n    removeLastVertex,\n    setDraggedVertex,\n    updateVertex\n} from './utils/GeometryBasicFunctionsUtils'\n\nexport const polygonActions = {\n    drag: 'drag',\n    addVertex: 'addVertex',\n\n    selectVertex: 'selectVertex',\n    dragVertex: 'dragVertex',\n}\n\nexport class PolygonGeometry extends Geometry {\n\n    constructor(parent, representationType) {\n        super(parent, representationType, polygonActions)\n\n        this.geometryType = geometryTypes.polygon\n\n        this.addVertex = (position) => addVertex(position, this)\n        this.addVertexToEdge = (edge, position) => addVertexToEdge(edge, position, this)\n        this.updateVertex = (position, vertex = null) => updateVertex(position, this, vertex)\n        this.removeLastVertex = () => removeLastVertex(this)\n        this.moveDelta = (movement) => moveDelta(movement, this)\n        this.getLastVertex = () => getLastVertex(this)\n        this.setDraggedVertex = (vertex) => setDraggedVertex(vertex, this)\n        this.getVerticesCount = () => getVerticesCount(this)\n    }\n\n    close() {\n        this.removeLastVertex()\n\n        const startVertex = this.vertexGroup.getVertexByIndex(-1)\n        const endVertex = this.vertexGroup.getVertexByIndex(0)\n\n        this.edgeGroup.addEdge(startVertex, endVertex)\n\n        this.setAction(polygonActions.idle)\n\n        if (this.face) {\n            this.face.dispose()\n        }\n\n        this.face = new Face(this.representationType, this.vertexGroup.getPositions())\n\n        if (!this.face.parent) {\n            this.add(this.face)\n        }\n    }\n\n    setActive(active) {\n        super.setActive(active)\n\n        if (this.face) {\n            this.face.setActive(active)\n        }\n    }\n\n    getFirstVertex() {\n        return this.vertexGroup.children.length ? this.vertexGroup.children[0] : null\n    }\n\n    isClockwise() {\n        let result = 0\n\n        const vertices = this.vertexGroup.getPositions()\n\n        for (let i = 0; i < vertices.length - 1; i++) {\n            result += PolygonGeometry.isClockwiseHelper(vertices[i], vertices[i + 1])\n        }\n\n        result += PolygonGeometry.isClockwiseHelper(vertices[vertices.length - 1], vertices[0])\n\n        return result >= 0\n    }\n\n    static isClockwiseHelper(startVertex, endVertex) {\n        return (endVertex.x - startVertex.x) * (endVertex.y + startVertex.y)\n    }\n\n    dispose() {\n        super.dispose()\n        if (this.face) {\n            this.face.dispose()\n        }\n    }\n\n    fromJSON(json) {\n        super.fromJSON(json)\n\n        this.face = new Face(this.representationType, this.vertexGroup.getPositions())\n        this.add(this.face)\n    }\n\n}\n\nexport default PolygonGeometry","import {createFaceBufferGeometry} from '../geometries/FaceFactory'\nimport {BufferAttribute, MathUtils, Matrix4, Vector2} from 'three'\nimport {isPolygonClockwise} from './GeometryHelper'\nimport {representationTypes} from '../config/RepresentationTypes'\n\nexport function createFaceBufferGeometryRingOffset(vertices, offsetOutward = .2, offsetInward = .2) {\n\n    let inwardVertices = getOffsetByRingVertices(vertices, offsetInward)\n    let outwardVertices = getOffsetByRingVertices(vertices, -offsetOutward)\n\n    if (isPolygonClockwise(vertices)) {\n        const tmp = inwardVertices\n        inwardVertices = outwardVertices\n        outwardVertices = tmp\n    }\n\n    const geometry = createFaceBufferGeometry(outwardVertices, [inwardVertices])\n\n    return {geometry: geometry, innerVertices: inwardVertices, outerVertices: outwardVertices}\n}\n\nexport function createFaceBufferGeometryLinearOffset(vertices, offsetLeft = .2, offsetRight = .2) {\n    const faceVertices = getOffsetByLinearVertices(vertices, offsetLeft)\n        .concat(getOffsetByLinearVertices(vertices, -offsetRight).reverse())\n    const geometry = createFaceBufferGeometry(faceVertices)\n\n    return {geometry: geometry, vertices: faceVertices}\n}\n\nfunction getOffsetByLinearVertices(vertices, offset = .5) {\n    let result = []\n\n    const startVertex = new Vector2(vertices[0].x, vertices[0].y)\n    const endVertex = new Vector2(vertices[1].x, vertices[1].y)\n\n    let point = startVertex.clone().sub(endVertex)\n        .normalize()\n        .multiplyScalar(offset)\n        .add(startVertex)\n        .rotateAround(startVertex, MathUtils.degToRad(-90))\n    result.push(point)\n\n    const offsetBuffer = new BufferAttribute(new Float32Array([offset, 0, 0]), 3)\n\n    for (let i = 1; i < vertices.length - 1; i++) {\n        result.push(getOffsetPositionBetweenVertices(vertices[i - 1], vertices[i], vertices[i + 1], offsetBuffer))\n    }\n\n    const startVertex2 = new Vector2(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y)\n    const endVertex2 = new Vector2(vertices[vertices.length - 2].x, vertices[vertices.length - 2].y)\n\n    let point2 = startVertex2.clone().sub(endVertex2)\n        .normalize()\n        .multiplyScalar(offset)\n        .add(startVertex2)\n        .rotateAround(startVertex2, MathUtils.degToRad(90))\n    result.push(point2)\n\n    return result\n}\n\nfunction getOffsetByRingVertices(vertices, offset) {\n    let result = []\n\n    const offsetBuffer = new BufferAttribute(new Float32Array([offset, 0, 0]), 3)\n\n    for (let i = 0; i < vertices.length; i++) {\n        result.push(getOffsetPositionBetweenVertices(vertices[i - 1 < 0 ? vertices.length - 1 : i - 1], vertices[i], vertices[i + 1 === vertices.length ? 0 : i + 1], offsetBuffer))\n    }\n\n    return result\n}\n\nfunction getOffsetPositionBetweenVertices(previousVertex, currentVertex, nextVertex, offset) {\n    let v1 = new Vector2().subVectors(previousVertex, currentVertex);\n    let v2 = new Vector2().subVectors(nextVertex, currentVertex);\n    let angle = v2.angle() - v1.angle()\n    let hA = angle * 0.5\n    let tA = v2.angle() + Math.PI * 0.5\n\n    let shift = Math.tan(hA - Math.PI * 0.5)\n    let shiftMatrix = new Matrix4().set(\n        1, 0, 0, 0,\n        -shift, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    )\n\n    let rotationMatrix = new Matrix4().set(\n        Math.cos(tA), -Math.sin(tA), 0, 0,\n        Math.sin(tA), Math.cos(tA), 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    )\n\n    let translationMatrix = new Matrix4().set(\n        1, 0, 0, currentVertex.x,\n        0, 1, 0, currentVertex.y,\n        0, 0, 1, 0,\n        0, 0, 0, 1,\n    )\n\n    let cloneOffset = offset.clone();\n\n    cloneOffset.applyMatrix4(shiftMatrix)\n    cloneOffset.applyMatrix4(rotationMatrix)\n    cloneOffset.applyMatrix4(translationMatrix)\n\n    return new Vector2(cloneOffset.getX(0), cloneOffset.getY(0))\n}\n\nexport function getIncreaseOffsetByRepresentationType(currentValue, representationType) {\n    let offsetting = getOffsettingByRepresentationType(representationType)\n    let newValue = currentValue\n\n    for (let i = 0; i < offsetting.length - 1; i++) {\n        if (offsetting[i] > currentValue) {\n            newValue = offsetting[i]\n            i = offsetting.length\n        }\n    }\n\n    return newValue\n}\n\nexport function getDecreaseOffsetByRepresentationType(currentValue, representationType) {\n    let offsetting = getOffsettingByRepresentationType(representationType)\n    let newValue = currentValue\n\n    for (let i = offsetting.length - 1; i >= 0; i--) {\n        if (offsetting[i] < currentValue) {\n            newValue = offsetting[i]\n            i = -1\n        }\n    }\n\n    return newValue\n}\n\nfunction getOffsettingByRepresentationType(representationType) {\n    let offsetting = []\n\n    switch (representationType) {\n        case representationTypes.wall:\n            offsetting = offsettingWall\n            break\n        case representationTypes.outline:\n            offsetting = offsettingOutline\n            break\n        default:\n            break\n    }\n\n    return offsetting\n}\n\nconst offsettingWall = [.1, .2, .4, .6, .8, 1]\nconst offsettingOutline = [.1, .2, .4, .6, .8, 1]","import {representationTypes} from '../config/RepresentationTypes'\n\nimport {outlineConfig} from '../config/OutlineConfig'\nimport {wallConfig} from '../config/WallConfig'\nimport {defaultConfig} from '../config/DefaultConfig'\n\nexport function getPropertiesByRepresentationType(representationType) {\n\n    switch (representationType) {\n        case representationTypes.outline:\n            return outlineConfig.properties\n        case representationTypes.wall:\n            return wallConfig.properties\n        default:\n            return defaultConfig.properties\n    }\n}","export function getOffset(offsetGeometry) {\n    return offsetGeometry.offsetLeft + offsetGeometry.offsetRight\n}\n\nexport function getOffsets(offsetGeometry) {\n    return {\n        offsetLeft: offsetGeometry.offsetLeft,\n        offsetRight: offsetGeometry.offsetRight\n    }\n}\n\nexport function setOffset(offsetGeometry, offset) {\n    if (!offsetGeometry.hasOwnProperty('offsetLeft') ||\n        !offsetGeometry.hasOwnProperty('offsetRight'))\n        return\n\n    if (offsetGeometry.offsetLeft > 0 && offsetGeometry.offsetRight > 0) {\n        offsetGeometry.offsetLeft = offset / 2\n        offsetGeometry.offsetRight = offset / 2\n    } else if (offsetGeometry.offsetLeft > 0) {\n        offsetGeometry.offsetLeft = offset\n    } else {\n        offsetGeometry.offsetRight = offset\n    }\n}\n\nexport function shiftOffsetToLeft(offsetGeometry) {\n    if (!offsetGeometry.hasOwnProperty('offsetLeft') ||\n        !offsetGeometry.hasOwnProperty('offsetRight'))\n        return\n\n    if (offsetGeometry.offsetLeft === 0) {\n        const offsetHalf = offsetGeometry.offsetRight / 2\n        offsetGeometry.offsetLeft = offsetHalf\n        offsetGeometry.offsetRight = offsetHalf\n    } else if (offsetGeometry.offsetLeft > 0 && offsetGeometry.offsetRight > 0) {\n        offsetGeometry.offsetLeft = offsetGeometry.offsetLeft + offsetGeometry.offsetRight\n        offsetGeometry.offsetRight = 0\n    }\n}\n\nexport function shiftOffsetToRight(offsetGeometry) {\n    if (!offsetGeometry.hasOwnProperty('offsetLeft') ||\n        !offsetGeometry.hasOwnProperty('offsetRight'))\n        return\n\n    if (offsetGeometry.offsetRight === 0) {\n        const offsetHalf = offsetGeometry.offsetLeft / 2\n        offsetGeometry.offsetLeft = offsetHalf\n        offsetGeometry.offsetRight = offsetHalf\n    } else if (offsetGeometry.offsetLeft > 0 && offsetGeometry.offsetRight > 0) {\n        offsetGeometry.offsetRight = offsetGeometry.offsetLeft + offsetGeometry.offsetRight\n        offsetGeometry.offsetLeft = 0\n    }\n}\n\nexport function addToOffset(offsetGeometry, step) {\n    if (!offsetGeometry.hasOwnProperty('offsetLeft') ||\n        !offsetGeometry.hasOwnProperty('offsetRight') ||\n        !offsetGeometry.hasOwnProperty('setOffset'))\n        return\n\n    let offset = offsetGeometry.offsetLeft + offsetGeometry.offsetRight\n\n    if (offset + step > 0.2) {\n        offsetGeometry.setOffset(offset + step)\n    }\n}","import {Mesh} from 'three'\n\nimport PolygonGeometry from './PolygonGeometry'\n\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {materialTypes} from '../common/MaterialTypes'\nimport {getMaterial} from '../common/Materials'\nimport {createFaceBufferGeometryRingOffset} from '../helper/Offsetting'\nimport {getPropertiesByRepresentationType} from '../factories/PropertiesFactory'\n\nimport {\n    addToOffset,\n    getOffset,\n    getOffsets,\n    setOffset,\n    shiftOffsetToLeft,\n    shiftOffsetToRight\n} from './utils/OffsetGeometryUtils'\nimport {addVertexToEdge, moveDelta, updateVertex} from './utils/GeometryBasicFunctionsUtils'\n\nexport class OffsetPolygonGeometry extends PolygonGeometry {\n\n    constructor(parent, representationType, properties) {\n        super(parent, representationType)\n\n        if (properties) {\n            this.offsetLeft = properties.offsetLeft\n            this.offsetRight = properties.offsetRight\n            this.properties = properties\n        } else {\n            const properties = getPropertiesByRepresentationType(representationType)\n            this.offsetLeft = properties.offsetLeft\n            this.offsetRight = properties.offsetRight\n            this.properties = properties\n        }\n\n        this.addToOffset = (step) => {\n            addToOffset(this, step)\n            this.updateOffsetFace()\n        }\n        this.setOffset = (offset) => setOffset(this, offset)\n        this.getOffset = () => {\n            return getOffset(this)\n        }\n        this.getOffsets = () => {\n            return getOffsets(this)\n        }\n\n        this.shiftOffsetToLeft = () => {\n            shiftOffsetToLeft(this)\n            this.updateOffsetFace()\n        }\n        this.shiftOffsetToRight = () => {\n            shiftOffsetToRight(this)\n            this.updateOffsetFace()\n        }\n\n        this.updateVertex = (position, vertex = null) => {\n            updateVertex(position, this, vertex)\n\n            this.updateOffsetFace()\n        }\n        this.addVertexToEdge = (edge, position) => {\n            addVertexToEdge(edge, position, this)\n\n            this.updateOffsetFace()\n        }\n        this.moveDelta = (movement) => {\n            moveDelta(movement, this)\n\n            if (this.offsetFace) {\n                this.offsetFace.position.x += movement.x\n                this.offsetFace.position.y += movement.y\n            }\n        }\n    }\n\n    close() {\n        super.close()\n\n        this.vertexGroup.setActive(false)\n        this.edgeGroup.setActive(false)\n        this.createOffsetFace()\n    }\n\n    getVerticesPositions() {\n        const verticesPositions = super.getVerticesPositions()\n\n        return this.offsetFace ? verticesPositions.concat(this.offsetFace.outerVertices).concat(this.offsetFace.innerVertices) : verticesPositions;\n    }\n\n    fromJSON(json) {\n        super.fromJSON(json)\n\n        this.createOffsetFace()\n    }\n\n    getNearestEdgeToPosition(position) {\n        return this.edgeGroup.getNearestEdgeToPosition(position)\n    }\n\n    createOffsetFace() {\n        const {\n            geometry,\n            innerVertices,\n            outerVertices\n        } = createFaceBufferGeometryRingOffset(this.vertexGroup.getPositions(), this.offsetLeft, this.offsetRight)\n\n        this.offsetFace = new Mesh(geometry, getMaterial(materialTypes.black))\n        this.offsetFace.geometryType = geometryTypes.offsetFace\n        this.offsetFace.innerVertices = innerVertices\n        this.offsetFace.outerVertices = outerVertices\n\n        this.add(this.offsetFace)\n    }\n\n    updateOffsetFace() {\n        const {offsetFace, vertexGroup, offsetLeft, offsetRight} = this\n\n        if (!offsetFace)\n            return\n\n        offsetFace.position.set(0, 0)\n        offsetFace.geometry.dispose()\n        const {\n            geometry,\n            innerVertices,\n            outerVertices\n        } = createFaceBufferGeometryRingOffset(vertexGroup.getPositions(), offsetLeft, offsetRight)\n        offsetFace.geometry = geometry\n        offsetFace.innerVertices = innerVertices\n        offsetFace.outerVertices = outerVertices\n\n        this.edgeGroup.updateAllEdgesCallbacks()\n    }\n}\n\n","import {Geometry} from './Geometry'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {\n    addVertex,\n    addVertexToEdge,\n    getLastVertex,\n    getVerticesCount,\n    moveDelta,\n    removeLastVertex,\n    setDraggedVertex,\n    updateVertex\n} from './utils/GeometryBasicFunctionsUtils'\n\nexport const polylineActions = {\n    drag: 'drag',\n\n    addVertex: 'addVertex',\n}\n\nexport class PolylineGeometry extends Geometry {\n\n    constructor(parent, representationType) {\n        super(parent, representationType, polylineActions)\n\n        this.geometryType = geometryTypes.polyline\n\n        this.addVertex = (position) => addVertex(position, this)\n        this.addVertexToEdge = (edge, position) => addVertexToEdge(edge, position, this)\n        this.updateVertex = (position, vertex = null) => updateVertex(position, this, vertex)\n        this.removeLastVertex = () => removeLastVertex(this)\n        this.moveDelta = (movement) => moveDelta(movement, this)\n        this.setDraggedVertex = (vertex) => setDraggedVertex(vertex, this)\n        this.getLastVertex = () => getLastVertex(this)\n        this.getVerticesCount = () => getVerticesCount(this)\n    }\n\n    close() {\n        const lastVertex = this.vertexGroup.getVertexByIndex(-1)\n        this.edgeGroup.removeEdges(lastVertex.getEdges())\n        this.vertexGroup.remove(lastVertex)\n    }\n\n}","import {PolylineGeometry} from './PolylineGeometry'\nimport {Mesh} from 'three'\n\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {materialTypes} from '../common/MaterialTypes'\nimport {getMaterial} from '../common/Materials'\n\nimport {getPropertiesByRepresentationType} from '../factories/PropertiesFactory'\nimport {createFaceBufferGeometryLinearOffset} from '../helper/Offsetting'\n\nimport {\n    addToOffset,\n    getOffset,\n    getOffsets,\n    setOffset,\n    shiftOffsetToLeft,\n    shiftOffsetToRight\n} from './utils/OffsetGeometryUtils'\nimport {addVertexToEdge, moveDelta, updateVertex} from './utils/GeometryBasicFunctionsUtils'\n\nexport class OffsetPolylineGeometry extends PolylineGeometry {\n\n    constructor(parent, representationType, properties) {\n        super(parent, representationType)\n\n        if (properties) {\n            this.offsetLeft = properties.offsetLeft\n            this.offsetRight = properties.offsetRight\n            this.properties = properties\n        } else {\n            const properties = getPropertiesByRepresentationType(representationType)\n            this.offsetLeft = properties.offsetLeft\n            this.offsetRight = properties.offsetRight\n            this.properties = properties\n        }\n\n        this.addToOffset = (step) => {\n            addToOffset(this, step)\n            this.updateOffsetFace()\n        }\n        this.setOffset = (offset) => setOffset(this, offset)\n        this.getOffset = () => {\n            return getOffset(this)\n        }\n        this.getOffsets = () => {\n            return getOffsets(this)\n        }\n        this.shiftOffsetToLeft = () => {\n            shiftOffsetToLeft(this)\n            this.updateOffsetFace()\n        }\n        this.shiftOffsetToRight = () => {\n            shiftOffsetToRight(this)\n            this.updateOffsetFace()\n        }\n\n        this.updateVertex = (position, vertex = null) => {\n            updateVertex(position, this, vertex)\n\n            this.updateOffsetFace()\n        }\n        this.addVertexToEdge = (edge, position) => {\n            addVertexToEdge(edge, position, this)\n\n            this.updateOffsetFace()\n        }\n        this.moveDelta = (movement) => {\n            moveDelta(movement, this)\n\n            if (this.offsetFace) {\n                this.offsetFace.position.x += movement.x\n                this.offsetFace.position.y += movement.y\n            }\n        }\n    }\n\n    close() {\n        super.close()\n\n        this.vertexGroup.setActive(false)\n        this.edgeGroup.setActive(false)\n        this.createOffsetFace()\n    }\n\n    getVerticesPositions() {\n        const verticesPositions = super.getVerticesPositions()\n\n        return this.offsetFace ?\n            this.offsetLeft > 0 && this.offsetRight > 0 ?\n                verticesPositions.concat(this.offsetFace.vertices)\n                : this.offsetFace.vertices : verticesPositions\n    }\n\n    getNearestEdgeToPosition(position) {\n        return this.edgeGroup.getNearestEdgeToPosition(position)\n    }\n\n    createOffsetFace() {\n        const {\n            geometry,\n            vertices\n        } = createFaceBufferGeometryLinearOffset(this.vertexGroup.getPositions(), this.offsetLeft, this.offsetRight)\n\n        this.offsetFace = new Mesh(geometry, getMaterial(materialTypes.black))\n        this.offsetFace.geometryType = geometryTypes.offsetFace\n        this.offsetFace.vertices = vertices\n\n        this.add(this.offsetFace)\n    }\n\n    updateOffsetFace() {\n        const {offsetFace, vertexGroup, offsetLeft, offsetRight} = this\n\n        if (!offsetFace)\n            return\n\n        offsetFace.position.set(0, 0)\n        offsetFace.geometry.dispose()\n        const {\n            geometry,\n            vertices\n        } = createFaceBufferGeometryLinearOffset(vertexGroup.getPositions(), offsetLeft, offsetRight)\n        offsetFace.geometry = geometry\n        offsetFace.vertices = vertices\n\n        this.edgeGroup.updateAllEdgesCallbacks()\n    }\n\n    fromJSON(json) {\n        super.fromJSON(json)\n\n        this.createOffsetFace()\n    }\n\n\n}","import {Geometry} from './Geometry'\nimport {\n    addVertex,\n    addVertexToEdge,\n    getLastEdge,\n    getLastVertex,\n    getVerticesCount,\n    removeLastVertex,\n    setDraggedVertex,\n    updateVertex\n} from './utils/GeometryBasicFunctionsUtils'\nimport {addAllChildrenToOtherGroup} from '../helper/GroupHelper'\n\nexport const polygraphActions = {\n    drag: 'drag',\n\n    addVertex: 'addVertex',\n    dragVertex: 'dragVertex',\n}\n\nexport class PolygraphGeometry extends Geometry {\n    constructor(parent, representationType) {\n        super(parent, representationType, polygraphActions)\n\n        this.addVertex = (position) => addVertex(position, this)\n        this.addVertexToEdge = (edge, position) => addVertexToEdge(edge, position, this)\n        this.updateVertex = (position, vertex = null) => updateVertex(position, this, vertex)\n        this.removeLastVertex = () => removeLastVertex(this)\n        this.getLastVertex = () => getLastVertex(this)\n        this.getLastEdge = () => getLastEdge(this)\n        this.setDraggedVertex = (vertex) => setDraggedVertex(vertex, this)\n        this.getVerticesCount = () => getVerticesCount(this)\n    }\n\n    extendAtVertex(vertex, position) {\n        this.vertexGroup.setVertexOrder(vertex, -1)\n        this.addVertex(position)\n        this.setActive(true)\n        this.setAction(this.actions.addVertex)\n    }\n\n    extendAtEdge(edge, position) {\n        this.addVertexToEdge(edge, position)\n        this.addVertex(position)\n        this.setActive(true)\n        this.setAction(this.actions.addVertex)\n    }\n\n    mergeToOwnVertex(ownVertex, polygraph) {\n        polygraph.setActive(false)\n\n        const lastVertexFromOtherPolygraph = polygraph.getLastVertex()\n        const lastEdgeFromOtherPolygraph = lastVertexFromOtherPolygraph.getEdges()[0]\n        const previousVertexFromOtherPolygraph = lastEdgeFromOtherPolygraph.getVertices().find(v => v !== lastVertexFromOtherPolygraph)\n\n        polygraph.removeLastVertex()\n\n        addAllChildrenToOtherGroup(polygraph.vertexGroup, this.vertexGroup)\n        addAllChildrenToOtherGroup(polygraph.edgeGroup, this.edgeGroup)\n\n        this.edgeGroup.addEdge(previousVertexFromOtherPolygraph, ownVertex)\n    }\n\n    mergeToOwnEdge(ownEdge, polygraph) {\n        polygraph.setActive(false)\n\n        const lastVertexFromOtherPolygraph = polygraph.getLastVertex()\n        const lastEdgeFromOtherPolygraph = lastVertexFromOtherPolygraph.getEdges()[0]\n        const previousVertexFromOtherPolygraph = lastEdgeFromOtherPolygraph.getVertices().find(v => v !== lastVertexFromOtherPolygraph)\n\n        polygraph.removeLastVertex()\n\n        addAllChildrenToOtherGroup(polygraph.vertexGroup, this.vertexGroup)\n        addAllChildrenToOtherGroup(polygraph.edgeGroup, this.edgeGroup)\n\n        const newVertex = this.edgeGroup.addVertexToEdge(ownEdge, lastVertexFromOtherPolygraph.position)\n        this.edgeGroup.addEdge(previousVertexFromOtherPolygraph, newVertex)\n\n        this.setActive(false)\n    }\n\n    connectLastVertexToOwnVertex(ownVertex) {\n        const lastVertex = this.getLastVertex()\n        const lastEdge = lastVertex.getEdges()[0]\n        const previousVertex = lastEdge.getVertices().find(vertex => vertex !== lastVertex)\n\n        this.removeLastVertex()\n\n        this.edgeGroup.addEdge(previousVertex, ownVertex)\n\n        this.setActive(false)\n    }\n\n    connectLastVertexToOwnEdge(ownEdge) {\n        const lastVertex = this.getLastVertex()\n        const lastEdge = lastVertex.getEdges()[0]\n        const previousVertex = lastEdge.getVertices().find(vertex => vertex !== lastVertex)\n\n        this.removeLastVertex()\n\n        const newVertex = this.edgeGroup.addVertexToEdge(ownEdge, lastVertex.position)\n\n        this.edgeGroup.addEdge(previousVertex, newVertex)\n\n        this.setActive(false)\n    }\n\n    close() {\n        const lastVertex = this.vertexGroup.getVertexByIndex(-1)\n        this.edgeGroup.removeEdges(lastVertex.getEdges())\n        this.vertexGroup.remove(lastVertex)\n        this.setActive(false)\n    }\n}","import {representationTypes} from '../config/RepresentationTypes'\n\nimport {OffsetPolygonGeometry} from '../geometries/OffsetPolygonGeometry'\nimport {OffsetPolylineGeometry} from '../geometries/OffsetPolylineGeometry'\nimport {ReferenceEdgeGeometry} from '../geometries/ReferenceEdgeGeometry'\nimport {PolygraphGeometry} from '../geometries/PolygraphGeometry'\nimport PolygonGeometry from \"../geometries/PolygonGeometry\";\n\nexport function createGeometryByRepresentationType(representationType, parent, properties) {\n    switch (representationType) {\n        case representationTypes.outline:\n            return new OffsetPolygonGeometry(parent, representationType, properties)\n        case representationTypes.wall:\n            return new OffsetPolylineGeometry(parent, representationType, properties)\n        case representationTypes.door:\n            return new ReferenceEdgeGeometry(parent, representationType, properties)\n        case representationTypes.window:\n            return new ReferenceEdgeGeometry(parent, representationType, properties)\n        case representationTypes.graph:\n            return new PolygraphGeometry(parent, representationType, properties)\n        case representationTypes.new:\n            return new PolygonGeometry(parent, representationType, properties)\n        default:\n            return null\n    }\n}\n","import {geometryTypes} from '../config/GeometryTypes'\nimport {PolyEdgeController} from './PolyEdgeController'\nimport {createGeometryByRepresentationType} from '../factories/GeometryFactory'\n\nexport class PolygonController extends PolyEdgeController {\n\n    closingDistance\n    minVerticesCount\n\n    constructor(floorPlanerController, representationType, group) {\n        super(floorPlanerController, representationType, group)\n\n        this.closingDistance = 0.5\n        this.minVerticesCount = 3\n    }\n\n    onLeftMouseDown(event, geometry, currentGeometries) {\n        if (!geometry) {\n            console.log(\"nooo  geo yet \")\n            return this.onLeftMouseDownNew(event, currentGeometries)\n        } else {\n            console.log(\"geo yet \", geometry)\n            return this.onLeftMouseDownEdit(event, geometry, currentGeometries)\n        }\n    }\n\n    onLeftMouseDownNew(event, currentGeometries) {\n        const polygon = createGeometryByRepresentationType(this.representationType, this.group)\n        return super.onLeftMouseDownNew(event, polygon, currentGeometries)\n    }\n\n    onLeftMouseDownEdit(event, polygon, currentGeometries) {\n        if (!polygon)\n            return false\n\n        switch (polygon.getAction()) {\n            case polygon.actions.addVertex:\n                if (currentGeometries.length !== 1)\n                    return false\n\n                const currentPosition = this.getCurrentPosition(event, polygon.getLastVertex().position)\n\n                const firstVertex = polygon.getFirstVertex()\n\n                if (firstVertex.position.distanceTo(currentPosition) < this.closingDistance) {\n                    polygon.close()\n                    this.removeGeometryFromCurrentGeometries(polygon, currentGeometries)\n                } else {\n                    polygon.addVertex(currentPosition)\n                }\n                return true\n            case polygon.actions.select:\n                const raycastHitObject = this.floorPlanerController.getRaycastHitObjectForGeometryByGeometryTypes(polygon,\n                    [geometryTypes.vertex, geometryTypes.edge, geometryTypes.face])\n\n                if (!raycastHitObject)\n                    return false\n\n                switch (raycastHitObject.geometryType) {\n                    case geometryTypes.vertex:\n                        polygon.setDraggedVertex(raycastHitObject)\n                        polygon.setAction(polygon.actions.dragVertex)\n                        return true\n                    case geometryTypes.edge:\n                        polygon.addVertexToEdge(raycastHitObject, this.floorPlanerController.getCurrentPosition())\n                        polygon.setAction(polygon.actions.dragVertex)\n                        return true\n                    case geometryTypes.face:\n                        this.startDragPosition = this.floorPlanerController.getCurrentPosition().clone()\n                        currentGeometries.filter(geometry => geometry.actions['drag'])\n                            .forEach(geometry => geometry.setAction(geometry.actions.drag))\n                        return true\n                    default:\n                        return false\n                }\n            default:\n                return false\n        }\n    }\n\n    onLeftMouseDoubleClick(event, polygon, currentGeometries) {\n        return super.onLeftMouseDoubleClick(event, polygon, currentGeometries, 3)\n    }\n\n    onEnterDown(event, polygon, currentGeometries) {\n        return super.onEnterDown(event, polygon, currentGeometries, this.minVerticesCount)\n    }\n\n\n}","import {PolygonController} from './PolygonController'\n\nexport class OffsetPolygonController extends PolygonController {\n\n    onArrowLeftDown(event, offsetPolygon) {\n        if (!offsetPolygon)\n            return\n\n        offsetPolygon.shiftOffsetToLeft()\n    }\n\n    onArrowRightDown(event, offsetPolygon) {\n        if (!offsetPolygon)\n            return\n\n        offsetPolygon.shiftOffsetToRight()\n    }\n\n    onArrowUpDown(event, offsetPolygon) {\n        if (!offsetPolygon)\n            return\n\n        offsetPolygon.addToOffset(.2)\n    }\n\n    onArrowDownDown(event, offsetPolygon) {\n        if (!offsetPolygon)\n            return\n\n        offsetPolygon.addToOffset(-.2)\n    }\n\n}","import {geometryTypes} from '../config/GeometryTypes'\nimport {PolyEdgeController} from './PolyEdgeController'\nimport {createGeometryByRepresentationType} from '../factories/GeometryFactory'\n\nexport class PolylineController extends PolyEdgeController {\n\n    onLeftMouseDown(event, geometry, currentGeometries) {\n        if (!geometry) {\n            return this.onLeftMouseDownNew(event, currentGeometries)\n        } else {\n            return this.onLeftMouseDownEdit(event, geometry, currentGeometries)\n        }\n    }\n\n    onLeftMouseDownNew(event, currentGeometries) {\n        const polyline = createGeometryByRepresentationType(this.representationType, this.group)\n        return super.onLeftMouseDownNew(event, polyline, currentGeometries)\n    }\n\n    onLeftMouseDownEdit(event, polyline, currentGeometries) {\n        if (!polyline)\n            return false\n\n        switch (polyline.getAction()) {\n            case polyline.actions.addVertex:\n                if (currentGeometries.length !== 1)\n                    return false\n\n                polyline.addVertex(this.getCurrentPosition(event, polyline.getLastVertex().position))\n                return true\n            case polyline.actions.select:\n                const raycastHitObject = this.floorPlanerController.getRaycastHitObjectForGeometryByGeometryTypes(polyline,\n                    [geometryTypes.vertex, geometryTypes.edge])\n\n                if (!raycastHitObject)\n                    return false\n\n                switch (raycastHitObject.geometryType) {\n                    case geometryTypes.vertex:\n                        polyline.setDraggedVertex(raycastHitObject)\n                        polyline.setAction(polyline.actions.dragVertex)\n                        return true\n                    case geometryTypes.edge:\n                        polyline.addVertexToEdge(raycastHitObject, this.floorPlanerController.getCurrentPosition())\n                        polyline.setAction(polyline.actions.dragVertex)\n                        return true\n                    default:\n                        return false\n                }\n            default:\n                return false\n        }\n    }\n\n    onLeftMouseDoubleClick(event, polygon, currentGeometries) {\n        return super.onLeftMouseDoubleClick(event, polygon, currentGeometries, 2)\n    }\n\n    onEnterDown(event, polyline, currentGeometries) {\n        return super.onEnterDown(event, polyline, currentGeometries, 2)\n    }\n\n}","import {PolylineController} from './PolylineController'\n\nexport class OffsetPolylineController extends PolylineController {\n\n    onArrowLeftDown(event, offsetPolyline) {\n        if (!offsetPolyline)\n            return\n\n        offsetPolyline.shiftOffsetToLeft()\n    }\n\n    onArrowRightDown(event, offsetPolyline) {\n        if (!offsetPolyline)\n            return\n\n        offsetPolyline.shiftOffsetToRight()\n    }\n\n    onArrowUpDown(event, offsetPolyline) {\n        if (!offsetPolyline)\n            return\n\n        offsetPolyline.addToOffset(.2)\n    }\n\n    onArrowDownDown(event, offsetPolyline) {\n        if (!offsetPolyline)\n            return\n\n        offsetPolyline.addToOffset(-.2)\n    }\n\n}","import {GeometryController} from './GeometryController'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {ReferenceEdgeGeometry} from '../geometries/ReferenceEdgeGeometry'\nimport {setPreviewReferenceEdgeActive} from '../helper/PreviewReferenceEdge'\nimport {representationTypes} from '../config/RepresentationTypes'\n\n\nexport class ReferenceEdgeController extends GeometryController {\n\n    onLeftMouseDown(event, geometry) {\n        if (!geometry) {\n            return this.onLeftMouseDownNew()\n        } else {\n            return ReferenceEdgeController.onLeftMouseDownEdit(event, geometry)\n        }\n    }\n\n    onLeftMouseDownNew() {\n        const {edge, position} = this.getEdgeAndPosition()\n\n        if (!edge || !edge.parent || !edge.parent.parent) {\n\n            return false\n        }\n\n        const referenceEdgeGeometry = new ReferenceEdgeGeometry(this.group, this.representationType)\n        referenceEdgeGeometry.updateReferenceEdge(edge, position)\n\n        return true\n    }\n\n    static onLeftMouseDownEdit(event, geometry) {\n        if (!geometry)\n            return false\n\n        switch (geometry.getAction()) {\n            case geometry.actions.select:\n                if (event.altKey) {\n                    geometry.setAction(geometry.actions.resize)\n                    return true\n                }\n                break\n            default:\n                return false\n        }\n\n        return false\n    }\n\n    onArrowLeftDown(event, geometry) {\n        return ReferenceEdgeController.move(geometry, -0.01)\n    }\n\n    onArrowRightDown(event, geometry) {\n        return ReferenceEdgeController.move(geometry, 0.01)\n    }\n\n    onArrowUpDown(event, geometry) {\n        return ReferenceEdgeController.addWidth(geometry, 0.01)\n    }\n\n    onArrowDownDown(event, geometry) {\n        return ReferenceEdgeController.addWidth(geometry, -0.01)\n    }\n\n    static addWidth(geometry, delta) {\n        if (!geometry)\n            return false\n\n        switch (geometry.getAction()) {\n            case geometry.actions.select:\n                geometry.addWidth(delta)\n                return true\n            default:\n                return false\n        }\n    }\n\n    static move(geometry, movement) {\n        if (!geometry)\n            return false\n\n        switch (geometry.getAction()) {\n            case geometry.actions.select:\n                geometry.move(movement)\n                return true\n            default:\n                return false\n        }\n    }\n\n    onMouseMove(event, geometry, currentGeometries) {\n        if (!geometry && !currentGeometries.length) {\n            const {position, edge} = this.getEdgeAndPosition()\n\n            setPreviewReferenceEdgeActive(position, this.representationType, edge)\n            return true\n        }\n\n        if (!geometry)\n            return false\n\n        switch (geometry.getAction()) {\n            case geometry.actions.drag:\n                geometry.moveDelta(this.floorPlanerController.getMouseDeltaMovement())\n                return true\n            case geometry.actions.resize:\n                if (event.altKey) {\n                    geometry.addWidth(this.floorPlanerController.getMouseDeltaMovement().x)\n                    return true\n                } else {\n                    return false\n                }\n            default:\n                return false\n        }\n    }\n\n    onLeftMouseUp(event, geometry) {\n        if (!geometry) {\n            return false\n        }\n\n        switch (geometry.getAction()) {\n            case geometry.actions.drag:\n                geometry.setAction(geometry.actions.select)\n                return true\n            case geometry.actions.resize:\n                geometry.setAction(geometry.actions.select)\n                return true\n            default:\n                return false\n        }\n    }\n\n    onBackspaceDown(event, geometry, currentGeometries) {\n        if (!geometry) {\n            return false\n        }\n\n        switch (geometry.getAction()) {\n            case geometry.actions.select:\n                this.removeGeometryFromGroup(geometry, currentGeometries)\n                return true\n            default:\n                return false\n        }\n    }\n\n    getEdgeAndPosition() {\n        const geometry = this.floorPlanerController.getRaycastHitObjectByRepresentationTypes([representationTypes.outline, representationTypes.wall], [geometryTypes.face])\n\n        const edge = geometry ? geometry.getNearestEdgeToPosition(this.floorPlanerController.getCurrentPosition()) : geometry\n        const position = edge ? edge.getNearestPositionOnEdge(this.floorPlanerController.getCurrentPosition()) : this.floorPlanerController.getCurrentPosition()\n\n        return {edge: edge, position: position}\n    }\n\n}","import {PolyEdgeController} from './PolyEdgeController'\nimport {geometryTypes} from '../config/GeometryTypes'\nimport {createGeometryByRepresentationType} from '../factories/GeometryFactory'\n\n\nexport class PolygraphController extends PolyEdgeController {\n\n    onLeftMouseDown(event, geometry, currentGeometries) {\n        if (!geometry) {\n            return this.onLeftMouseDownNew(event, currentGeometries)\n        } else {\n            return this.onLeftMouseDownEdit(event, geometry, currentGeometries)\n        }\n    }\n\n    onLeftMouseDownNew(event, currentGeometries) {\n        const childGeometry = this.floorPlanerController.getRaycastHitObjectByRepresentationTypesAndGeometryType(\n            [this.representationType], [geometryTypes.vertex, geometryTypes.edge])\n        const childGeometryType = childGeometry ? childGeometry.geometryType : null\n\n        switch (childGeometryType) {\n            case geometryTypes.vertex:\n                const parentGeometryFromVertex = childGeometry.getGeometry()\n                parentGeometryFromVertex.extendAtVertex(childGeometry, this.getCurrentPosition(event))\n                currentGeometries.push(parentGeometryFromVertex)\n                return true\n            case geometryTypes.edge:\n                const parentGeometryFromEdge = childGeometry.getGeometry()\n                parentGeometryFromEdge.extendAtEdge(childGeometry, this.getCurrentPosition(event))\n                currentGeometries.push(parentGeometryFromEdge)\n                return true\n            default:\n                const polygraph = createGeometryByRepresentationType(this.representationType, this.group)\n                return super.onLeftMouseDownNew(event, polygraph, currentGeometries)\n        }\n\n\n    }\n\n    onLeftMouseDownEdit(event, polygraph, currentGeometries) {\n        if (!polygraph)\n            return false\n\n        switch (polygraph.getAction()) {\n            case polygraph.actions.addVertex:\n                if (currentGeometries.length !== 1)\n                    return false\n\n                const childGeometry = this.floorPlanerController.getRaycastHitObjectByRepresentationTypesAndGeometryType(\n                    [this.representationType], [geometryTypes.vertex, geometryTypes.edge], [], [polygraph.getLastVertex(), polygraph.getLastEdge()])\n                const childGeometryType = childGeometry ? childGeometry.geometryType : null\n\n                const currentPosition = this.getCurrentPosition(event, polygraph.getLastVertex().position)\n\n                switch (childGeometryType) {\n                    case geometryTypes.vertex:\n                        const parentGeometryFromVertex = childGeometry.getGeometry()\n\n                        if (parentGeometryFromVertex === polygraph) {\n                            polygraph.connectLastVertexToOwnVertex(childGeometry)\n                            this.removeGeometryFromCurrentGeometries(polygraph, currentGeometries)\n                        } else {\n                            parentGeometryFromVertex.mergeToOwnVertex(childGeometry, polygraph)\n                            this.removeGeometryFromCurrentGeometries(polygraph, currentGeometries)\n                        }\n                        return true\n                    case geometryTypes.edge:\n                        const parentGeometryFromEdge = childGeometry.getGeometry()\n\n                        if (parentGeometryFromEdge === polygraph) {\n                            polygraph.connectLastVertexToOwnEdge(childGeometry)\n                            this.removeGeometryFromCurrentGeometries(polygraph, currentGeometries)\n                        } else {\n                            parentGeometryFromEdge.mergeToOwnEdge(childGeometry, polygraph)\n                            this.removeGeometryFromCurrentGeometries(polygraph, currentGeometries)\n                        }\n                        return true\n                    default:\n                        break\n                }\n\n                polygraph.addVertex(currentPosition)\n                return true\n            case polygraph.actions.select:\n                return this.onLeftMouseDownSelect(event, polygraph)\n            default:\n                return false\n        }\n    }\n\n    onLeftMouseDownSelect(event, polygraph) {\n        const raycastHitObject = this.floorPlanerController.getRaycastHitObjectForGeometryByGeometryTypes(polygraph,\n            [geometryTypes.vertex, geometryTypes.edge])\n\n        if (!raycastHitObject)\n            return false\n\n        switch (raycastHitObject.geometryType) {\n            case geometryTypes.vertex:\n                polygraph.setDraggedVertex(raycastHitObject)\n                polygraph.setAction(polygraph.actions.dragVertex)\n                return true\n            case geometryTypes.edge:\n                polygraph.addVertexToEdge(raycastHitObject, this.getCurrentPosition(event))\n                polygraph.setAction(polygraph.actions.dragVertex)\n                return true\n            default:\n                return false\n        }\n    }\n\n}","import {Group, Vector2, Vector3} from 'three'\nimport {orbitControlActions} from '../common/OrbitControls'\nimport {addMouseEvents, removeMouseEvents} from '../common/MouseEvents'\nimport {addKeyEvents, keyCodes, removeKeyEvents} from '../common/KeyEvents'\nimport {representationTypes} from '../config/RepresentationTypes'\nimport {controllerActions} from './GeometryController'\n\nimport {MagicGuideLine} from '../helper/MagicGuideLine'\nimport {PreviewVertex, setPreviewVertexActive} from '../helper/PreviewVertex'\nimport {PreviewStamp} from '../helper/PreviewStamp'\nimport {PreviewReferenceEdge, setPreviewReferenceEdgeActive} from '../helper/PreviewReferenceEdge'\n\nimport {SelectController} from './SelectController'\nimport {createControllerByRepresentationType} from '../factories/ControllerFactory'\nimport {createGeometryByRepresentationType} from '../factories/GeometryFactory'\nimport {addTouchEvents} from \"../common/TouchEvents\";\n\nexport class FloorPlanerController {\n    representationGroups = new Map()\n    representationController = new Map()\n\n    currentPosition = new Vector3()\n    lastPosition = new Vector3()\n    catchPlane = null\n\n    currentTool = representationTypes.select\n    currentGeometries = []\n    lastCameraZoom = null\n\n    isActionExecuted = false\n\n    constructor(mount, scene, camera, raycaster, orbitControls, repTypes = [], renderer) {\n        this.mount = mount\n        this.scene = scene\n        this.camera = camera\n        this.raycaster = raycaster\n        this.orbitControls = orbitControls\n        this.renderer = renderer\n\n        this.selectController = new SelectController(this, [representationTypes.door, representationTypes.window, representationTypes.outline, representationTypes.wall, representationTypes.graph])\n\n        addMouseEvents(mount.current,\n            event => this.onMouseDown(event),\n            event => this.onMouseMove(event))\n        addMouseEvents(document,\n            null,\n            null,\n            event => this.onMouseUp(event))\n        addKeyEvents(event => this.onKeyDown(event),\n            event => this.onKeyUp(event))\n\n        this.catchPlane = this.scene.children.find(child => child.name === 'catchPlane')\n\n        this.magicGuideLine = new MagicGuideLine(this.scene)\n        this.previewVertex = new PreviewVertex(this.scene)\n        this.previewStamp = new PreviewStamp(this.scene)\n        this.previewReferenceEdge = new PreviewReferenceEdge(this.scene)\n\n        this.orbitControls.addEventListener(orbitControlActions.change, () => this.updateCamera())\n\n        this.setUpRepresentationTypeGroup(repTypes)\n        this.setUpRepresentationTypeController(repTypes)\n    }\n\n    setUpRepresentationTypeGroup(representationTypes) {\n        representationTypes.forEach(representationType => {\n            const group = new Group()\n            group.name = representationType + 'Group'\n            this.representationGroups.set(representationType, group)\n            this.scene.add(group)\n        })\n    }\n\n    setUpRepresentationTypeController(representTypes) {\n        representTypes.forEach(representationType => {\n            const controller = createControllerByRepresentationType(this, representationType, this.representationGroups.get(representationType))\n            if (controller) {\n                this.representationController.set(representationType, controller)\n            }\n        })\n    }\n\n    deconstructor(currentMount) {\n        removeMouseEvents(currentMount,\n            event => this.onMouseDown(event),\n            event => this.onMouseMove(event),\n            event => this.onMouseUp(event))\n        removeKeyEvents(event => this.onKeyDown(event),\n            event => this.onKeyUp(event))\n    }\n\n    onMouseDown(event) {\n        // Left Click\n        if (event.button === 0) {\n            // Single Click\n            if (event.detail === 1) {\n                if (!this.callFunctionPrimaryForCurrentGeometries(controllerActions.onLeftMouseDown, event)) {\n                    this.callFunctionForSelection(controllerActions.onLeftMouseDown, event)\n                }\n            }\n            // Double Click\n            else if (event.detail === 2) {\n                if (!this.callFunctionPrimaryForCurrentGeometries(controllerActions.onLeftMouseDoubleClick, event))\n                    this.callFunctionForSelection(controllerActions.onLeftMouseDown, event)\n            }\n        }\n        // Right Click\n        else if (event.button === 2) {\n            if (event.detail === 1) {\n                if (!this.callFunctionPrimaryForCurrentGeometries(controllerActions.onRightMouseDown, event))\n                    this.callFunctionForSelection(controllerActions.onRightMouseDown, event)\n            }\n            // Double Click\n            else if (event.detail === 2) {\n                if (!this.callFunctionPrimaryForCurrentGeometries(controllerActions.onRightMouseDoubleClick, event))\n                    this.callFunctionForSelection(controllerActions.onRightMouseDoubleClick, event)\n            }\n        }\n    }\n\n    onMouseMove(event) {\n        this.storeCurrentPosition(event)\n        this.previewVertex.setActive(false)\n        this.previewStamp.setActive(false)\n        this.previewReferenceEdge.setActive(false)\n\n        if (!this.callFunctionPrimaryForCurrentGeometries(controllerActions.onMouseMove, event))\n            if (!this.callFunctionForAllRepresentationTypes(controllerActions.onMouseMove, event))\n                this.callFunctionForSelection(controllerActions.onMouseMove, event)\n    }\n\n    onMouseUp(event) {\n        if (event.button === 0) {\n            // Single Click\n            if (event.detail === 1) {\n                if (!this.callFunctionPrimaryForCurrentGeometries(controllerActions.onLeftMouseUp, event))\n                    this.callFunctionForSelection(controllerActions.onLeftMouseUp, event)\n            }\n        }\n    }\n\n    onKeyDown(event) {\n        switch (event.code) {\n            case keyCodes.digit1:\n                this.changeTool(representationTypes.select)\n                break\n            case keyCodes.digit2:\n                this.orbitControls.enablePan = false\n                this.changeTool(representationTypes.outline)\n                break\n            case keyCodes.digit3:\n                this.changeTool(representationTypes.wall)\n                break\n            case keyCodes.digit4:\n                this.changeTool(representationTypes.door)\n                break\n            case keyCodes.digit5:\n                this.changeTool(representationTypes.window)\n                break\n            case keyCodes.digit6:\n                this.changeTool(representationTypes.graph)\n                break\n            case keyCodes.backspace:\n                this.callFunctionForCurrentGeometries(controllerActions.onBackspaceDown, event)\n                break\n            case keyCodes.escape:\n                this.callFunctionForCurrentGeometries(controllerActions.onEscapeDown, event)\n                this.callFunctionForSelection(controllerActions.onEscapeDown, event)\n                break\n            case keyCodes.enter:\n                this.callFunctionForCurrentGeometries(controllerActions.onEnterDown, event)\n                break\n            case keyCodes.space:\n                this.resetCamera()\n                break\n            case keyCodes.arrowLeft:\n                this.callFunctionForCurrentGeometries(controllerActions.onArrowLeftDown, event)\n                break\n            case keyCodes.arrowRight:\n                this.callFunctionForCurrentGeometries(controllerActions.onArrowRightDown, event)\n                break\n            case keyCodes.arrowDown:\n                this.callFunctionForCurrentGeometries(controllerActions.onArrowDownDown, event)\n                break\n            case keyCodes.arrowUp:\n                this.callFunctionForCurrentGeometries(controllerActions.onArrowUpDown, event)\n                break\n            case keyCodes.keyA:\n                if (!this.callFunctionPrimaryForCurrentGeometries(controllerActions.onKeyADown, event))\n                    this.callFunctionForSelection(controllerActions.onKeyADown, event)\n                break\n            case keyCodes.keyI:\n                console.log(this.renderer.info)\n                break\n            case keyCodes.keyS:\n                if (event.ctrlKey || event.metaKey) {\n                    console.log('SAVE', this.getGeometries().map(geometry => geometry.toJSON()))\n                    event.preventDefault()\n                }\n                break\n            case keyCodes.f12:\n            case keyCodes.controlLeft:\n            case keyCodes.metaLeft:\n            case keyCodes.altLeft:\n                break\n            default:\n                console.log(event.code)\n                break\n        }\n    }\n\n    onKeyUp(event) {\n        if (!(event.ctrlKey || event.metaKey)) {\n            this.magicGuideLine.setOrientation()\n        }\n\n    }\n\n    changeTool(representationType) {\n        this.selectController.cancelCurrentActions(this.currentGeometries)\n        this.currentTool = representationType\n        setPreviewVertexActive(this.currentPosition, representationType)\n        setPreviewReferenceEdgeActive(this.currentPosition, representationType)\n    }\n\n    callFunctionForSelection(controllerFunction, event) {\n        if (this.currentTool === representationTypes.select) {\n            if (this.selectController[controllerFunction])\n                this.selectController[controllerFunction](event, this.currentGeometries)\n        }\n    }\n\n    callFunctionPrimaryForCurrentGeometries(controllerFunction, event) {\n        if (this.currentGeometries.length) {\n            return this.callFunctionForCurrentGeometries(controllerFunction, event)\n        } else {\n            this.callFunctionForCurrentRepresentationType(controllerFunction, event)\n        }\n    }\n\n    callFunctionForCurrentGeometries(controllerFunction, event) {\n        let executeAction = false\n\n        for (let i = this.currentGeometries.length - 1; i >= 0; i--) {\n            const geometry = this.currentGeometries[i]\n            const representationController = this.representationController.get(geometry.representationType)\n\n            if (representationController[controllerFunction]) {\n                executeAction |= representationController[controllerFunction](event, geometry, this.currentGeometries)\n            }\n        }\n\n        return executeAction\n    }\n\n    callFunctionForCurrentRepresentationType(controllerFunction, event) {\n        const representationController = this.representationController.get(this.currentTool)\n\n        if (representationController && representationController[controllerFunction])\n            representationController[controllerFunction](event, null, this.currentGeometries)\n    }\n\n    callFunctionForAllRepresentationTypes(controllerFunction, event) {\n        this.representationController.forEach((representationType, controller) => {\n            if (controller && controller[controllerFunction] && this.currentGeometries.includes(representationType))\n                controller[controllerFunction](event, null, this.currentGeometries)\n        })\n    }\n\n    updateCamera() {\n        if (this.camera.zoom !== this.lastCameraZoom) {\n            this.updateGeometryScale(this.camera.zoom)\n\n            this.lastCameraZoom = this.camera.zoom\n        }\n    }\n\n    updateGeometryScale(currentCameraZoom) {\n        let scale = 3 / (currentCameraZoom < geometryScale.minZoomLevel ?\n            (currentCameraZoom > geometryScale.maxZoomLevel ? currentCameraZoom : geometryScale.maxZoomLevel) :\n            geometryScale.minZoomLevel)\n\n        this.getGeometries().forEach(geometry => {\n            geometry.updateScale(scale)\n        })\n\n        this.magicGuideLine.updateScale(scale)\n        this.previewVertex.updateScale(scale)\n        this.previewStamp.updateScale(scale)\n    }\n\n    getCurrentPosition() {\n        return this.currentPosition.clone()\n    }\n\n    // Movement between to updates\n    getMouseDeltaMovement() {\n        return new Vector2(this.currentPosition.x - this.lastPosition.x, this.currentPosition.y - this.lastPosition.y)\n    }\n\n    storeCurrentPosition(event) {\n        const {clientWidth: width, clientHeight: height, offsetTop: top, offsetLeft: left} = this.mount.current\n        const {clientX: mousePositionX, clientY: mousePositionY} = event\n\n        const x = ((mousePositionX - left) / width) * 2 - 1\n        const y = -(((mousePositionY - top) / height) * 2 - 1)\n\n        this.raycaster.setFromCamera(new Vector2(x, y), this.camera)\n\n        const intersect = this.raycaster.intersectObject(this.catchPlane)\n\n        if (intersect.length) {\n            this.lastPosition = this.currentPosition.clone()\n            this.currentPosition.x = intersect[0].point.x\n            this.currentPosition.y = intersect[0].point.y\n        }\n    }\n\n    getRaycastHitObjectForGeometryByGeometryTypes(geometry, geometryTypes, ignoreGeometryTypes = []) {\n        return this.getRaycastHitObjectByAttribute('geometryType', geometryTypes, [geometry], ignoreGeometryTypes)\n    }\n\n    getRaycastHitObjectByGeometryTypes(geometryTypes, ignoreGeometryTypes = []) {\n        return this.getRaycastHitObjectByAttribute('geometryType', geometryTypes, this.getGeometries(), ignoreGeometryTypes)\n    }\n\n    getRaycastHitObjectByRepresentationTypes(representationTypes, ignoreGeometryTypes = []) {\n        return this.getRaycastHitObjectByAttribute('representationType', representationTypes, this.getGeometries(), ignoreGeometryTypes)\n    }\n\n    getRaycastHitObjectsByRepresentationTypes(representationTypes, ignoreGeometryTypes) {\n        return this.getRaycastHitObjectByAttribute('representationType', representationTypes, this.getGeometries(), ignoreGeometryTypes, true)\n    }\n\n    getRaycastHitObjectByRepresentationTypesAndGeometryType(representationTypes, geometryTypes, ignoreGeometryTypes = [], ignoreGeometries = []) {\n        return this.getRaycastHitObjectByAttribute('geometryType', geometryTypes,\n            this.getGeometriesByRepresentationTypes(representationTypes), ignoreGeometryTypes, false, ignoreGeometries)\n    }\n\n    getRaycastHitObjectByAttribute(attribute, types, geometries = this.getGeometries(), ignoreGeometryTypes = [], multiple = false, ignoreGeometries = []) {\n        const intersections = this.raycaster.intersectObjects(geometries, true)\n        let raycastHitObject = null\n        let raycastHitObjects = []\n\n        if (!!intersections.length) {\n            for (let i = 0; i < intersections.length; i++) {\n                raycastHitObject = intersections[i].object\n\n                while (raycastHitObject && !types.includes(raycastHitObject[attribute])) {\n                    raycastHitObject = ignoreGeometryTypes.includes(raycastHitObject.geometryType) ? null : raycastHitObject.parent\n                }\n\n                if (raycastHitObject &&\n                    !ignoreGeometries.includes(raycastHitObject) &&\n                    !(raycastHitObject['getGeometry'] && ignoreGeometries.includes(raycastHitObject.getGeometry()))) {\n                    if (!multiple)\n                        return raycastHitObject\n                    else if (!raycastHitObjects.includes(raycastHitObject))\n                        raycastHitObjects.push(raycastHitObject)\n                }\n\n            }\n        }\n\n        return multiple ? raycastHitObjects : null\n    }\n\n    getGeometries() {\n        return Array.from(this.representationGroups.values()).map(group => group.children).flat()\n    }\n\n    getGeometryByUuid(geometryUuid) {\n        return this.getGeometries().find(geometry => geometry.uuid === geometryUuid)\n    }\n\n    getEdgeByUuid(edgeUuid, geometries = this.getGeometries()) {\n        return geometries.map(geometry => geometry.edgeGroup.findEdgeByUuid(edgeUuid)).find(edge => edge)\n    }\n\n    getVertexByUuid(vertexUuid, geometries = this.getGeometries()) {\n        return geometries.map(geometry => geometry.vertexGroup.findVertexByUuid(vertexUuid)).find(edge => edge)\n    }\n\n    getGeometriesByRepresentationType(representationType) {\n        return this.getGeometriesByRepresentationTypes([representationType])\n    }\n\n    getGeometriesByRepresentationTypes(representationTypes = []) {\n        let geometries = []\n        representationTypes.forEach(representationType => {\n            geometries = geometries.concat(this.representationGroups.get(representationType).children)\n        })\n        return geometries\n    }\n\n    getAllVertices() {\n        return this.getGeometries().map(geometry => geometry.getVertices()).flat()\n    }\n\n    getAllVerticesPositions() {\n        return this.getGeometries().map(geometry => geometry.getVerticesPositions()).flat()\n    }\n\n    getAllEdges() {\n        return this.getGeometries().map(geometry => geometry.getEdges()).flat()\n    }\n\n    setGeometries(geometries) {\n        geometries.forEach(geometryJSON => {\n            const representationType = geometryJSON.representationType\n            let group = this.representationGroups.get(geometryJSON.representationType)\n            if (!group) {\n                alert('RepresentationType: ' + representationType + ' is not supported in this configuration\\n' +\n                    'Add RepresentationType to the constructor')\n                return\n            }\n            const properties = geometryJSON.properties\n            const geometryInstance = createGeometryByRepresentationType(representationType, group, geometryJSON.properties)\n            if (properties.referenceEdge && geometryInstance['setReferenceEdge']) {\n                const referenceEdge = this.getEdgeByUuid(properties.referenceEdge)\n                geometryInstance.setReferenceEdge(referenceEdge)\n            }\n            if (properties.referenceVertex && geometryInstance['setReferenceVertex']) {\n                const referenceVertex = this.getVertexByUuid(properties.referenceVertex)\n                geometryInstance.setReferenceVertex(referenceVertex)\n            }\n\n            geometryInstance.fromJSON(geometryJSON)\n        })\n\n        this.updateGeometryScale(this.camera.zoom)\n    }\n\n    resetCamera() {\n        this.camera.position.set(0, 0)\n        this.camera.zoom = geometryScale.resetZoomLevel\n        this.orbitControls.target.x = 0\n        this.orbitControls.target.y = 0\n\n        this.orbitControls.update()\n        this.camera.updateProjectionMatrix()\n    }\n}\n\nconst geometryScale = {\n    minZoomLevel: 3,\n    resetZoomLevel: 1.5,\n    maxZoomLevel: 1,\n}","import {representationTypes} from '../config/RepresentationTypes'\n\nimport {OffsetPolygonController} from '../controller/OffsetPolygonController'\nimport {OffsetPolylineController} from '../controller/OffsetPolylineController'\nimport {ReferenceEdgeController} from '../controller/ReferenceEdgeController'\nimport {PolygraphController} from '../controller/PolygraphController'\n\nexport function createControllerByRepresentationType(floorPlanerController, representationType, group) {\n    switch (representationType) {\n        case representationTypes.outline:\n            return new OffsetPolygonController(floorPlanerController, representationType, group)\n        case representationTypes.wall:\n            return new OffsetPolylineController(floorPlanerController, representationType, group)\n        case representationTypes.door:\n            return new ReferenceEdgeController(floorPlanerController, representationType, group)\n        case representationTypes.graph:\n            return new PolygraphController(floorPlanerController, representationType, group)\n        default:\n            return\n    }\n}\n","import React, {useEffect, useRef} from 'react'\nimport Measure from 'react-measure'\n\nimport {resize} from './common/Renderer'\nimport {cleanUp, setUp} from './common/SetUp'\n\nimport {FloorPlanerController} from './controller/FloorPlanerController'\nimport {representationTypes} from './config/RepresentationTypes'\nimport {geometryTypes} from './config/GeometryTypes'\nimport {withStyles} from \"@material-ui/core\";\n\nconst geometries = [\n    {\n        uuid: '042A2EC8-712B-4334-977C-0897F2546CDA',\n        geometryType: geometryTypes.polygon,\n        representationType: representationTypes.outline,\n        vertices: [{uuid: '142A2EC8-712B-4334-977C-0897F2546CDA', x: -2, y: -2, z: 0},\n            {uuid: '242A2EC8-712B-4334-977C-0897F2546CDA', x: 4, y: -2, z: 0},\n            {uuid: '342A2EC8-712B-4334-977C-0897F2546CDA', x: 3, y: 1, z: 0},\n            {uuid: '442A2EC8-712B-4334-977C-0897F2546CDA', x: -2, y: 2, z: 0}],\n        edges: [{\n            uuid: '112A2EC8-712B-4334-977C-0897F2546CDA',\n            startVertex: '142A2EC8-712B-4334-977C-0897F2546CDA',\n            endVertex: '242A2EC8-712B-4334-977C-0897F2546CDA'\n        },\n            {\n                uuid: '122A2EC8-712B-4334-977C-0897F2546CDA',\n                startVertex: '242A2EC8-712B-4334-977C-0897F2546CDA',\n                endVertex: '342A2EC8-712B-4334-977C-0897F2546CDA'\n            },\n            {\n                uuid: '132A2EC8-712B-4334-977C-0897F2546CDA',\n                startVertex: '342A2EC8-712B-4334-977C-0897F2546CDA',\n                endVertex: '442A2EC8-712B-4334-977C-0897F2546CDA'\n            },\n            {\n                uuid: '142A2EC8-712B-4334-977C-0897F2546CDA',\n                startVertex: '442A2EC8-712B-4334-977C-0897F2546CDA',\n                endVertex: '142A2EC8-712B-4334-977C-0897F2546CDA'\n            }\n        ],\n        isValidate: false,\n        errors: [],\n        properties: {\n            offsetLeft: .0,\n            offsetRight: .4,\n        }\n    },\n    {\n        uuid: '042B2EC8-712B-4334-977C-0897F2546CDA',\n        geometryType: geometryTypes.polygon,\n        representationType: representationTypes.outline,\n        vertices: [{uuid: '142B2EC8-712B-4334-977C-0897F2546CDA', x: -8, y: -2, z: 0},\n            {uuid: '242B2EC8-712B-4334-977C-0897F2546CDA', x: -4, y: -2, z: 0},\n            {uuid: '342B2EC8-712B-4334-977C-0897F2546CDA', x: -4, y: 2, z: 0},\n            {uuid: '442B2EC8-712B-4334-977C-0897F2546CDA', x: -8, y: 2, z: 0}],\n        edges: [{\n            uuid: '112B2EC8-712B-4334-977C-0897F2546CDA',\n            startVertex: '142B2EC8-712B-4334-977C-0897F2546CDA',\n            endVertex: '242B2EC8-712B-4334-977C-0897F2546CDA'\n        },\n            {\n                uuid: '122B2EC8-712B-4334-977C-0897F2546CDA',\n                startVertex: '242B2EC8-712B-4334-977C-0897F2546CDA',\n                endVertex: '342B2EC8-712B-4334-977C-0897F2546CDA'\n            },\n            {\n                uuid: '132B2EC8-712B-4334-977C-0897F2546CDA',\n                startVertex: '342B2EC8-712B-4334-977C-0897F2546CDA',\n                endVertex: '442B2EC8-712B-4334-977C-0897F2546CDA'\n            },\n            {\n                uuid: '142B2EC8-712B-4334-977C-0897F2546CDA',\n                startVertex: '442B2EC8-712B-4334-977C-0897F2546CDA',\n                endVertex: '142B2EC8-712B-4334-977C-0897F2546CDA'\n            }\n        ],\n        isValidate: false,\n        errors: [],\n        properties: {\n            offsetLeft: .4,\n            offsetRight: 0,\n        }\n    },\n    {\n        uuid: '92CDD2E0-DAEC-450D-BB12-3E93F0E82EE6',\n        geometryType: geometryTypes.polyline,\n        representationType: representationTypes.wall,\n        vertices: [{uuid: '3148DBBB-7CBB-4425-9043-AD76896FA396', x: -5.877327508148702, y: 2, z: 0},\n            {uuid: 'E7622618-978A-4AF1-AF8C-EC9EF3490196', x: -5.877327508148702, y: -0.586582588875898, z: 0},\n            {uuid: 'FF970975-5EAD-4F82-9743-0C7BDBE8DA94', x: -4, y: -0.586582588875898, z: 0}],\n        isValidate: false,\n        edges: [\n            {\n                uuid: '672E540D-83B6-4D31-921F-45D5665B8757',\n                startVertex: '3148DBBB-7CBB-4425-9043-AD76896FA396',\n                endVertex: 'E7622618-978A-4AF1-AF8C-EC9EF3490196'\n            },\n            {\n                uuid: '82551481-89EB-4CC3-AB8D-C6C2371744C3',\n                startVertex: 'E7622618-978A-4AF1-AF8C-EC9EF3490196',\n                endVertex: 'FF970975-5EAD-4F82-9743-0C7BDBE8DA94'\n            }\n        ],\n        errors: [],\n        properties: {offsetLeft: 0.2, offsetRight: 0},\n    },\n    /*\n    {\n        uuid: '921DD2E0-DAEC-450D-BB12-3E93F0E82EE6',\n        geometryType: 'stamp',\n        representationType: 'door',\n        vertices: [],\n        isValidate: false,\n        edges: [],\n        properties: {\n            referenceEdgeUuid: '672E540D-83B6-4D31-921F-45D5665B8757',\n            referenceVertexUuid: '3148DBBB-7CBB-4425-9043-AD76896FA396',\n            relative: .7,\n            absolute: .4,\n            width: 1.2,\n        }\n    }*/\n\n    {\n        uuid: \"48E174DA-9891-4D06-B8DE-20805813322A\",\n        geometryType: geometryTypes.stamp,\n        representationType: representationTypes.door,\n        isValidate: false,\n        errors: [],\n        properties: {\n            referenceEdge: \"112A2EC8-712B-4334-977C-0897F2546CDA\",\n            referenceVertex: \"142A2EC8-712B-4334-977C-0897F2546CDA\",\n            relative: 0.6336898068198362,\n            width: 1\n        },\n    },\n    {\n        uuid: \"41DCF9F4-01F9-4A07-ACD9-F059FE32EF1C\",\n        geometryType: geometryTypes.stamp,\n        representationType: representationTypes.door,\n        isValidate: false,\n        errors: [],\n        properties: {\n            referenceEdge: '112A2EC8-712B-4334-977C-0897F2546CDA',\n            referenceVertex: '142A2EC8-712B-4334-977C-0897F2546CDA',\n            absolute: 1.0504649268300206,\n            width: 1,\n        }\n    }\n]\n\nconst styles = theme => ({\n    floorPlaner: {\n        width: '100%',\n        height: '100%',\n    },\n    canvasContaienr: {\n        width: '100%',\n        height: '100%',\n    },\n})\n\nfunction FloorPlaner(props) {\n    const mount = useRef(null)\n    const rendererRef = useRef(null)\n    const cameraRef = useRef(null)\n    const {classes} = props\n\n    useEffect(() => {\n        const {scene, camera, raycaster, orbitControls, renderer, frameId} = setUp(mount)\n\n        rendererRef.current = renderer\n        cameraRef.current = camera\n\n        const controller = new FloorPlanerController(mount, scene, camera, raycaster, orbitControls,\n            [representationTypes.outline, representationTypes.wall, representationTypes.door, representationTypes.window, representationTypes.graph],\n            renderer)\n\n        controller.setGeometries(geometries)\n\n        const currentMount = controller.mount.current\n\n        return () => {\n            controller.deconstructor(currentMount)\n            cleanUp(currentMount, renderer, frameId)\n        }\n    }, [rendererRef, cameraRef])\n\n    return (\n        <Measure\n            bounds\n            onResize={() => {\n                resize(mount, rendererRef.current, cameraRef.current)\n            }}>\n            {({measureRef}) => (\n                <div className={classes.floorPlaner} ref={measureRef}>\n                    <div className={classes.canvasContaienr} ref={mount} tabIndex={0}/>\n                </div>\n            )}\n        </Measure>\n    )\n}\n\nexport default withStyles(styles)(FloorPlaner)\n","import {withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport SpreadsheetWrapper from \"../navigation/SpreadsheetWrapper\";\nimport FloorPlaner from \"../../drawingTool/three/FloorPlaner\";\nimport ColoredIconButton from \"../common/buttons/ColoredIconButton\";\nimport {keyCodes} from \"../../drawingTool/three/common/KeyEvents\";\n\nconst styles = theme => ({\n    root: {\n        minHeight: '100%',\n    },\n})\n\nfunction FotoContent({classes, t, ...props}) {\n\n    function getExpandedContent() {\n        return <div>\n        </div>\n    }\n\n    return (\n        <SpreadsheetWrapper spreadsheetExpandable expandedContent={getExpandedContent()}>\n            <div className={classes.root}>\n                <FloorPlaner/>\n            </div>\n        </SpreadsheetWrapper>\n    )\n}\n\nFotoContent.propTypes = {}\n\nexport default compose(withStyles(styles), withTranslation())(FotoContent)","import {withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport SpreadsheetWrapper from \"../navigation/SpreadsheetWrapper\";\n\nconst styles = theme => ({\n    root: {\n        // justifyContent: 'mid',\n        // width: '100%',\n        height: '100vh'\n        // display: 'flex',\n        // flexDirection: 'column',\n        // justifyContent: 'space-between'\n    },\n});\n\n\nfunction MappingContent({classes, t, ...props}) {\n    return (\n        <SpreadsheetWrapper spreadsheetExpandable>\n            <div className={classes.root}>\n            </div>\n        </SpreadsheetWrapper>\n    )\n}\n\nMappingContent.propTypes = {};\n\nexport default compose(withStyles(styles), withTranslation())(MappingContent);\n","export const URL_FOTO = '/foto'\nexport const URL_MAPPING = '/mapping'\nexport const URL_WINDOW = '/window'","import * as React from \"react\"\n\nfunction NavigationBackSvgIcon(props) {\n    return (\n        <svg width={32} height={32} xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n            <path\n                d=\"M13 23l-7-7 7-7m-7 7h20\"\n                stroke=\"#333\"\n                strokeWidth={2}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n            />\n        </svg>\n    )\n}\n\nexport default NavigationBackSvgIcon","import PropTypes from 'prop-types';\nimport {Typography, withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport NavigationBackSvgIcon from \"../common/icons/NavigationBackSvgIcon\";\nimport clsx from \"clsx\";\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        margin: 'auto 0',\n        alignSelf: 'flex-start',\n        alignItems: 'center',\n        cursor: 'pointer',\n    },\n    icon: {\n        marginRight: '5px',\n        width: '32px',\n        height: '32px',\n    },\n})\n\nfunction BackNavigation({classes, t, backLabel, onNavigateBack, className}) {\n    return (\n        <div className={clsx(classes.root, className)} onClick={onNavigateBack}>\n            <NavigationBackSvgIcon className={classes.icon}/>\n            <Typography variant={'h6'}>\n                {backLabel ? backLabel : t(\"back\")}\n            </Typography>\n        </div>\n    )\n}\n\nBackNavigation.propTypes = {\n    backLabel: PropTypes.string,\n    onNavigateBack: PropTypes.func.isRequired,\n}\n\nexport default compose(withStyles(styles), withTranslation())(BackNavigation)","import * as React from \"react\"\n\nfunction BurgerSvgIcon(props) {\n    return (\n        <svg width={32} height={32} xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n            <path\n                d=\"M10 16h16M6 10h20M14 22h12\"\n                stroke=\"#333\"\n                strokeWidth={2}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n            />\n        </svg>\n    )\n}\n\nexport default BurgerSvgIcon","import PropTypes from 'prop-types';\nimport {Typography, withStyles} from \"@material-ui/core\";\nimport BackNavigation from \"../navigation/BackNavigation\";\nimport BurgerSvgIcon from \"./icons/BurgerSvgIcon\";\nimport clsx from \"clsx\";\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    flexItem: {\n        flex: '1 1 0px'\n    },\n    burgerIcon: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    title: {\n        display: 'flex',\n        justifyContent: 'center'\n    }\n})\n\nfunction TopLevelInformation({classes, title, backLabel, onNavigateBack, className, ...props}) {\n    return (\n        <div className={clsx(classes.root, className)}>\n            <BackNavigation backLabel={backLabel} onNavigateBack={onNavigateBack} className={classes.flexItem}/>\n            <Typography variant={'h2'} className={clsx(classes.flexItem, classes.title)}>\n                {title}\n            </Typography>\n            <div className={`${classes.flexItem} ${classes.burgerIcon}`}>\n                <BurgerSvgIcon/>\n            </div>\n        </div>\n    )\n}\n\nTopLevelInformation.propTypes = {\n    title: PropTypes.string.isRequired,\n    backLabel: PropTypes.string.isRequired,\n    onNavigateBack: PropTypes.func.isRequired\n}\n\nexport default withStyles(styles)(TopLevelInformation)","import {compose} from \"redux\";\nimport {Typography, withStyles} from \"@material-ui/core\";\nimport {withTranslation} from \"react-i18next\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\n\nconst styles = theme => ({\n    root: {\n        paddingTop: '10px',\n        boxSizing: 'border-box',\n        height: theme.skeleton.appBar.heightExpandedContent\n    },\n    title: {}\n})\n\nfunction AppBarExpandedContent({classes, t, title, text, ...props}) {\n    return (\n        <div className={clsx(classes.root)}>\n            <Typography className={classes.title} variant={'h1'}>{title}</Typography>\n            <Typography variant={'h6'}>\n                {text}\n            </Typography>\n        </div>\n    )\n}\n\nAppBarExpandedContent.propTypes = {\n    title: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired\n}\n\nexport default compose(withStyles(styles), withTranslation())(AppBarExpandedContent)","import * as React from \"react\"\n\nfunction NavArrowDownSvgIcon(props) {\n    return (\n        <svg width={32} height={32} xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n            <path d=\"M23 12.5l-7 7-7-7\" stroke=\"#333\" strokeWidth={2} fill=\"none\"/>\n        </svg>\n    )\n}\n\nexport default NavArrowDownSvgIcon","import {Chip, withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport * as React from 'react';\nimport clsx from \"clsx\";\n\nconst styles = theme => ({\n    root: {\n        height: '25px',\n        backgroundColor: theme.colors.palette.corporate.yellowMain,\n        color: theme.palette.text.primary,\n        '&:active': {\n            backgroundColor: theme.colors.palette.corporate.yellowMain,\n        },\n        '&:hover': {\n            backgroundColor: theme.colors.palette.corporate.yellowDark,\n        },\n        '&:focus': {\n            backgroundColor: theme.colors.palette.corporate.yellowDark,\n        }\n    },\n    active: {\n        backgroundColor: theme.colors.palette.corporate.yellowDark,\n        '& .MuiChip-label': {\n            fontFamily: theme.typography.h2.fontFamily\n        }\n    }\n})\n\nfunction Breadcrumb({classes, t, active, label, onClick, ...props}) {\n\n    return (\n        <Chip className={clsx(classes.root, active ? classes.active : '')} label={label} onClick={onClick}/>\n    )\n}\n\nexport default compose(withStyles(styles), withTranslation())(Breadcrumb)","import {Breadcrumbs, withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {URL_FOTO, URL_MAPPING, URL_WINDOW} from \"../../../utils/urlUtils\";\nimport {useHistory} from \"react-router-dom\";\nimport * as React from 'react';\nimport {useState} from 'react';\nimport Breadcrumb from \"./Breadcrumb\";\n\nconst styles = theme => ({\n    root: {},\n    menuItem: {\n        cursor: 'pointer'\n    }\n})\n\nfunction BreadcrumbsMenu({classes, t, ...props}) {\n    let history = useHistory();\n    const [activeBreadCrumb, setActiveBreadCrumb] = useState(2);\n\n    function onBreadcrumbClick(breadcrumbIndex, url) {\n        setActiveBreadCrumb(breadcrumbIndex)\n        route(url)\n    }\n\n    function route(url) {\n        history.push(url)\n    }\n\n    return (\n        <div className={classes.root}>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Breadcrumb\n                    active={activeBreadCrumb === 0}\n                    label={t('foto')}\n                    onClick={() => onBreadcrumbClick(0, URL_FOTO)}\n                />\n                <Breadcrumb\n                    active={activeBreadCrumb === 1}\n                    label={t('mapping')}\n                    onClick={() => onBreadcrumbClick(1, URL_MAPPING)}\n                />\n                <Breadcrumb\n                    active={activeBreadCrumb === 2}\n                    label={t('window')}\n                    onClick={() => onBreadcrumbClick(2, URL_WINDOW)}\n                />\n            </Breadcrumbs>\n        </div>\n    )\n}\n\nexport default compose(withStyles(styles), withTranslation())(BreadcrumbsMenu)","import {compose} from \"redux\";\nimport {withStyles} from \"@material-ui/core\";\nimport {withTranslation} from \"react-i18next\";\nimport PropTypes from \"prop-types\";\nimport Expandable from \"../common/Expandable\";\nimport TopLevelInformation from \"../common/TopLevelInfomation\";\nimport clsx from \"clsx\";\nimport AppBarExpandedContent from \"./AppBarExpandedContent\";\nimport NavArrowDownSvgIcon from \"../common/icons/NavArrowDownSvgIcon\";\nimport BreadcrumbsMenu from \"./submenu/BreadcrumbsMenu\";\n\nconst styles = theme => ({\n    root: {\n        minHeight: theme.skeleton.appBar.height,\n        background: theme.colors.palette.corporate.yellowMain,\n        padding: theme.skeleton.appBar.padding,\n        borderRadius: '0 0 0 30px',\n        boxSizing: 'border-box',\n        position: 'absolute',\n        width: '100vw'\n    },\n    title: {\n        marginTop: '28px'\n    },\n    actions: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n})\n\nfunction AppBar({classes, t, title, contentTitle, contentDescription, ...props}) {\n    return (\n        <div className={clsx(classes.root)}>\n            <TopLevelInformation onNavigateBack={() => console.log(\"Back\")} backLabel={'Zurück'} title={title}/>\n            <Expandable clickElement={<NavArrowDownSvgIcon className={clsx(classes.icon)}/>}\n                        additionalElement={<BreadcrumbsMenu/>}>\n                <AppBarExpandedContent title={contentTitle} text={contentDescription}/>\n            </Expandable>\n        </div>\n    )\n}\n\nAppBar.propTypes = {\n    title: PropTypes.string.isRequired,\n    contentTitle: PropTypes.string,\n    contentDescription: PropTypes.string,\n}\n\nexport default compose(withStyles(styles), withTranslation())(AppBar)","import React from 'react';\nimport {withTranslation} from \"react-i18next\";\nimport {withStyles} from \"@material-ui/core\";\nimport {compose} from \"redux\";\nimport {Route, Switch} from 'react-router-dom'\nimport FotoContent from \"./foto/FotoContent\";\nimport WindowContent from \"./foto/FotoContent\";\nimport MappingContent from \"./mapping/MappingContent\";\nimport {URL_FOTO, URL_MAPPING, URL_WINDOW} from \"../utils/urlUtils\";\nimport AppBar from \"./navigation/AppBar\";\n\nconst styles = ({\n    appContainer: {\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n    },\n    content: {\n        height: '100vh'\n    }\n})\n\nfunction AppContainer({classes, t, ...props}) {\n\n    function getTitle() {\n        return 'Headline'\n    }\n\n    function getContentTitle() {\n        switch (props.location.pathname) {\n            case URL_FOTO:\n                return t('foto')\n            case URL_MAPPING:\n                return t('mapping')\n            case URL_WINDOW:\n                return t('window')\n            default:\n                return t('headline')\n\n        }\n    }\n\n    function getContentDescription() {\n        return 'Beschreibungstext, Beschreibungstext, Beschreibungstext, Beschreibungstext'\n    }\n\n    return (\n        <div className={classes.appContainer}>\n            {/*<Hidden lgUp>*/}\n            <AppBar title={getTitle()} contentTitle={getContentTitle()}\n                    contentDescription={getContentDescription()}/>\n            {/*</Hidden>*/}\n            {/*<Hidden mdDown>*/}\n            {/*    <SideSpreadsheet title={getTitle()} contentDescription={getContentDescription()}/>*/}\n            {/*</Hidden>*/}\n            <div className={classes.content}>\n                <Switch>\n                    <Route path={URL_FOTO} component={FotoContent}/>\n                    <Route path={URL_MAPPING} component={MappingContent}/>\n                    <Route path={URL_WINDOW} component={WindowContent}/>\n                    <Route path={'/'} component={FotoContent}/>\n                </Switch>\n            </div>\n        </div>\n    );\n}\n\nexport default compose(withStyles(styles), withTranslation())(AppContainer)\n\n","import './App.css';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport theme from \"./theme\";\nimport AppContainer from \"./components/AppContainer\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <BrowserRouter>\n                    <Switch>\n                        <Route component={AppContainer}/>\n                    </Switch>\n                </BrowserRouter>\n            </ThemeProvider>\n        </Provider>\n    );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}